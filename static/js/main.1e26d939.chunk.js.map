{"version":3,"sources":["icons/path-finding.png","icons/sort-algo.png","icons/prime-spiral.png","algorithm/path/A_star_algo.js","algorithm/maze/basic-maze.js","algorithm/path/bfs.js","algorithm/path/dfs.js","algorithm/path/dijkstra.js","algorithm/maze/randomized_dfs.js","algorithm/maze/recursive_division.js","components/Navbar.js","Pages/PathfindingVS.js","components/Card.js","components/Footer.js","Pages/Home.js","Pages/BubbleSort.js","algorithm/prime_spiral.js","Pages/PrimeSpiral.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","dx","dy","Astar","Grid","startNode","endNode","N","M","grid","Array","i","arr","j","push","gScore","x","y","path","close_list","open_list","h","Math","abs","f","length","atLeastValueIdx","curr_node","newOpen_list","tmp","tmpX","tmpY","error","isWall","newGScore","newFScore","includes","basicMaze","rows","cols","r","st","Set","c","floor","random","add","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","BFS","visited","visitedNodes","queue","front","shift","DFS","d","stack","neighbours","top","pop","dfs_iterative","Dijkstra","distance","priority_queue","cost","sort","a","b","vis","goForward","pr","pc","getNeighbors","Randomized_dfs","ren_id","dfs","recursiveDivision","divide","startRow","endRow","startCol","endCol","mid","ran_id","start","end","Navbar","_ref","msg","react_default","createElement","className","href","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","InitSR","InitSC","InitER","InitEC","animateTime","Spot","Object","classCallCheck","this","isStart","isEnd","Node","_ref4","pv","onMouseDown","onMouseEnter","onMouseUp","setStartEndNode","allowDrop","preventDefault","drop","data","dataTransfer","getData","dom","document","getElementById","id","parseInt","attributes","data_type","target","wall","data_x","data_y","classNode","typeId","draggable","onDragStart","setData","onDrop","onDragOver","toString","waitForAnimatoin","_callee6","time","regenerator_default","wrap","_context6","prev","next","abrupt","Promise","resolve","setTimeout","stop","isValid","App","_useState","useState","_useState2","slicedToArray","setGrid","_useState3","_useState4","isMousePress","setIsMousePress","_useState5","_useState6","mazeID","setMazeID","_useState7","_useState8","pathID","setPathID","_useState9","_useState10","animateType","setAnimateTimeType","useEffect","gridInitialize","animateVisitedNodes","_x","_animateVisitedNodes","apply","arguments","asyncToGenerator","mark","_callee4","node","_context4","concat","animateShortestPath","_x2","_animateShortestPath","_callee5","pathNode","_context5","reverse","pathFinding","_callee","obj","_context","t0","mazeGenerator","_ref2","_callee2","ar","_context2","createWall","_x3","makeAllCellAsAWall","mazeHandle","_ref3","_callee3","_context3","clearPathHandle","row","col","newGrid","toConsumableArray","animationTimeHandle","type","preStartNode","curStartNode","preEndNode","curEndNode","Fragment","components_Navbar","style","display","margin","onClick","onChange","disabled","onMouseLeave","map","R","idx_r","key","Value","idx_c","Card","props","_props$array","array","imgURL","text","src","alt","Footer","Home","textAlign","react_router_dom","to","components_Card","img1","img2","img3","BARS","barWidth","SPEED","waitForAnimate","_callee8","sp","_context8","SortingApp","bar","setBar","speed","setSpeed","sortID","setSortID","init","ORGINAL_COLOR","COMP_COLOR","SORTED_COLOR","swap","newBars","height","bubbleSort","_bubbleSort","_i6","sorted","background","selectionSort","_selectionSort","_callee7","_i7","leastIdx","_context7","insertionSort","_i","transform","partition","low","high","pivot","_x4","quickSort","pi","sent","_x5","_x6","_x7","mergeSort","newArr1","newArr2","_i2","_i3","k","idx","_x8","_x9","_x10","startSortingHandle","_ref5","_i4","printAllBar","item","width","generateNewArray","backgroundColor","name","htmlFor","event","max","valueAsNumber","min","step","prime_Spiral_Generate","num","list","direction","animation_time","PrimeApp","cntPrime","setCntPrime","gridOfNode","isPrime","startPrimeSpiral","children","react_router","exact","element","Pages_Home","Pages_PathfindingVS","BubbleSort","Pages_PrimeSpiral","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.1e26d939.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/path-finding.22453ad4.png\";","module.exports = __webpack_public_path__ + \"static/media/sort-algo.b32220b6.png\";","module.exports = __webpack_public_path__ + \"static/media/prime-spiral.aa4f6636.png\";","/* \r\nTo see my c++ submission:  \r\nhttps://cses.fi/problemset/result/3677359/\r\n\r\nWant to learn more about a* algorithm please visit\r\n\r\nhttps://www.youtube.com/watch?v=icZj67PTFhc&t=256s\r\nhttps://en.wikipedia.org/wiki/A*_search_algorithm\r\n\r\n*/\r\nvar dx = [0,0,+1,-1]\r\nvar dy = [+1,-1,0,0]\r\n\r\nfunction Astar(Grid,startNode,endNode,N,M){\r\n    var grid = new Array(N);\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push({gScore: 1e9, x: -1, y: -1});\r\n        }\r\n        grid[i] = arr;\r\n    }\r\n    let path = [], close_list = []; //here close_list means visited Node.\r\n    var open_list = [];\r\n    let h = Math.abs(startNode.x-endNode.x)+Math.abs(startNode.y-endNode.y);\r\n    open_list.push({f:h, x: startNode.x, y: startNode.y});\r\n    grid[startNode.x][startNode.y].gScore = 0;\r\n\r\n    while(open_list.length > 0){\r\n        var atLeastValueIdx = 0;\r\n        for(let i=0; i<open_list.length; i++){\r\n            if(open_list[atLeastValueIdx].f > open_list[i].f){\r\n                atLeastValueIdx = i;\r\n            }\r\n        }\r\n        var curr_node = open_list[atLeastValueIdx];\r\n        close_list.push(curr_node);\r\n        // to remove\r\n        var newOpen_list = [];\r\n        for(var i=0; i<open_list.length; i++) if(i!==atLeastValueIdx) newOpen_list.push(open_list[i]);\r\n        open_list = newOpen_list;\r\n\r\n        // // found the path\r\n        if(curr_node.x === endNode.x && curr_node.y === endNode.y){\r\n            // grid[x][y].x = curr_node.x;\r\n            // grid[x][y].y = curr_node.y;\r\n\r\n            var tmp = {x: curr_node.x, y: curr_node.y};\r\n            path.push({x:tmp.x,y:tmp.y});\r\n\r\n            while(grid[tmp.x][tmp.y].x!==-1  || grid[tmp.x][tmp.y].y!==-1){\r\n                let tmpX = grid[tmp.x][tmp.y].x;\r\n                let tmpY = grid[tmp.x][tmp.y].y;\r\n                tmp.x = tmpX;\r\n                tmp.y = tmpY;\r\n                path.push({x:tmp.x,y:tmp.y});\r\n            }\r\n            return {path,close_list,error:\"\"};\r\n        }\r\n\r\n        for(let i=0; i<4; i++){\r\n            let x = dx[i] + curr_node.x;\r\n            let y = dy[i] + curr_node.y;\r\n            if(!(x>=0 && x<N && y>=0 && y<M) || Grid[x][y].isWall) continue;\r\n\r\n            let newGScore  = grid[curr_node.x][curr_node.y].gScore + 1;\r\n            let HScore = Math.abs(x - endNode.x)+Math.abs(y - endNode.y);\r\n            let newFScore = newGScore + HScore;\r\n\r\n            if(grid[x][y].gScore > newGScore){\r\n                grid[x][y].gScore = newGScore;\r\n                grid[x][y].x = curr_node.x;\r\n                grid[x][y].y = curr_node.y;\r\n                if(!open_list.includes({f: newFScore, x, y})) open_list.push({f: newFScore, x, y});\r\n            }\r\n        }\r\n    }\r\n    return {path,close_list,error:\"path is not found\"};\r\n}\r\n\r\nexport default Astar;","\r\nfunction basicMaze(rows,cols){\r\n    var arr = [];\r\n    for(var r=0; r<rows; r++){\r\n        const st = new Set()\r\n        for(var j=0; j<cols/4; j++){\r\n            var c = Math.floor((Math.random()*100));\r\n            c %= cols;\r\n            st.add(c);\r\n        }\r\n        for(let c of st) arr.push({r,c});\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default basicMaze;","\r\nvar dx = [0,0,+1,-1]\r\nvar dy = [+1,-1,0,0]\r\n\r\nfunction BFS(Grid,startNode,endNode,N,M){\r\n    var grid = new Array(N);  // newArray - for no reference state-Grid;\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push({x: -1, y: -1, visited: 0});\r\n        }\r\n        grid[i] = arr;\r\n    }\r\n    var visitedNodes = [];\r\n    var path = [];\r\n\r\n    var queue = [];\r\n    queue.push({x : startNode.x, y: startNode.y});\r\n    grid[startNode.x][startNode.y].visited = 1;\r\n    visitedNodes.push({x: startNode.x, y: startNode.y});\r\n\r\n    while(queue.length > 0){\r\n        var front = queue.shift();\r\n\r\n        for(let i=0; i<4; i++){\r\n            var x = dx[i] + front.x;\r\n            var y = dy[i] + front.y;\r\n\r\n            if(x===endNode.x && y===endNode.y){\r\n                visitedNodes.push({x,y});\r\n                grid[x][y].x = front.x;\r\n                grid[x][y].y = front.y;\r\n                var tmp = {x,y};\r\n                path.push({x:tmp.x,y:tmp.y});   //not reference variable\r\n\r\n                while(grid[tmp.x][tmp.y].x!==-1  || grid[tmp.x][tmp.y].y!==-1){\r\n                    let tmpX = grid[tmp.x][tmp.y].x;\r\n                    let tmpY = grid[tmp.x][tmp.y].y;\r\n                    tmp.x = tmpX;\r\n                    tmp.y = tmpY;\r\n                    path.push({x:tmp.x,y:tmp.y});\r\n                }\r\n                return {path,visitedNodes,error:\"\"};\r\n            }\r\n\r\n            // 0 !== false  output: true\r\n            else if(x>=0 && y>=0 && x<N && y<M && !Grid[x][y].isWall && !grid[x][y].visited){\r\n                grid[x][y].visited = 1;\r\n                visitedNodes.push({x,y});\r\n\r\n                grid[x][y].x = front.x;\r\n                grid[x][y].y = front.y;\r\n                queue.push({x,y});\r\n            }\r\n        }\r\n    }\r\n    return {path,visitedNodes,error:\"Path is not found\"};\r\n}\r\n\r\nexport default BFS;","\r\nvar dx = [+1,-1,0,0]\r\nvar dy = [0,0,+1,-1]\r\n\r\nvar grid = [];\r\nvar visitedNodes = [];\r\nvar path = [];\r\n\r\nfunction dfs_iterative(r,c,endNode,Grid,N,M,d){\r\n    grid[r][c].visited = 1;\r\n    visitedNodes.push({x: r, y: c});\r\n\r\n    let stack = [];\r\n    stack.push({r,c});\r\n    while(stack.length > 0){\r\n        let neighbours = [];\r\n        let top = stack[stack.length-1];\r\n\r\n        // find all neighbours to store in array\r\n        for(let i=0; i<4; i++){\r\n            let x = top.r + dx[i];\r\n            let y = top.c + dy[i];\r\n            if(x>=0 && y>=0 && x<N && y<M && !Grid[x][y].isWall && !grid[x][y].visited){\r\n                neighbours.push({x,y});\r\n            }\r\n        }\r\n        if(neighbours.length > 0){\r\n\r\n            let random = (Math.floor(Math.random()*10))%neighbours.length;\r\n            let x = neighbours[random].x;\r\n            let y = neighbours[random].y;\r\n\r\n            if(x===endNode.x && y===endNode.y){\r\n                visitedNodes.push({x,y});\r\n                grid[x][y].x = top.r;\r\n                grid[x][y].y = top.c;\r\n                return 1;\r\n            }\r\n            else if(x>=0 && y>=0 && x<N && y<M && !Grid[x][y].isWall && !grid[x][y].visited){\r\n                grid[x][y].x = top.r;\r\n                grid[x][y].y = top.c;\r\n                grid[x][y].visited = 1;\r\n                visitedNodes.push({x,y});\r\n                stack.push({r:x,c:y});\r\n            }\r\n        }\r\n        else stack.pop();\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction DFS(Grid,startNode,endNode,N,M){\r\n    path = []; // make empty for repeated DFS runnig\r\n    visitedNodes = []; \r\n    grid = new Array(N);\r\n\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push({x: -1, y: -1, visited: 0});\r\n        }\r\n        grid[i] = arr;\r\n    }\r\n    dfs_iterative(startNode.x,startNode.y,endNode,Grid,N,M,0);\r\n    // -------   path  ---------------\r\n    if(grid[endNode.x][endNode.y].x===-1 && grid[endNode.x][endNode.y].y===-1){\r\n        return {path,visitedNodes,error:\"path is not found\"};\r\n    }\r\n    var tmp = {x:endNode.x,y: endNode.y};\r\n    path.push({x:tmp.x,y:tmp.y});\r\n    while(grid[tmp.x][tmp.y].x!==-1  || grid[tmp.x][tmp.y].y!==-1){\r\n        let tmpX = grid[tmp.x][tmp.y].x;\r\n        let tmpY = grid[tmp.x][tmp.y].y;\r\n        tmp.x = tmpX;\r\n        tmp.y = tmpY;\r\n        path.push({x:tmp.x,y:tmp.y});\r\n    }\r\n    return {path,visitedNodes,error:\"\"};\r\n}\r\n\r\nexport default DFS;","var dx = [0,0,+1,-1]\r\nvar dy = [+1,-1,0,0]\r\n\r\nfunction Dijkstra(Grid,startNode,endNode,N,M){\r\n    var visitedNodes = [];\r\n    var path = [];\r\n\r\n    var grid = new Array(N);\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push({distance: 1e9, x : -1, y : -1});\r\n        }\r\n        grid[i] = arr;\r\n    }\r\n    var priority_queue = [];\r\n    priority_queue.push({cost:0, x: startNode.x, y: startNode.y});\r\n    grid[startNode.x][startNode.y].distance = 0;\r\n    visitedNodes.push({x: startNode.x, y: startNode.y});\r\n\r\n    while(priority_queue.length > 0){\r\n        priority_queue.sort((a,b)=>a-b);\r\n        var top = priority_queue.shift();\r\n        if(top.cost !== grid[top.x][top.y].distance) continue;\r\n\r\n        for(let i=0; i<4; i++){\r\n            var x = dx[i] + top.x;\r\n            var y = dy[i] + top.y;\r\n            if(!(x>=0 && x<N && y>=0 && y<M) || Grid[x][y].isWall) continue;\r\n\r\n\r\n            if(x === endNode.x && y === endNode.y){ // path found\r\n                visitedNodes.push({x,y});\r\n                grid[x][y].x = top.x;\r\n                grid[x][y].y = top.y;\r\n                var tmp = {x,y};\r\n                path.push({x:tmp.x,y:tmp.y});\r\n\r\n                while(grid[tmp.x][tmp.y].x!==-1  || grid[tmp.x][tmp.y].y!==-1){\r\n                    let tmpX = grid[tmp.x][tmp.y].x;\r\n                    let tmpY = grid[tmp.x][tmp.y].y;\r\n                    tmp.x = tmpX;\r\n                    tmp.y = tmpY;\r\n                    path.push({x:tmp.x,y:tmp.y});\r\n                }\r\n                return {path,visitedNodes,error:\"\"};\r\n            }\r\n            else if(grid[x][y].distance > 1 + grid[top.x][top.y].distance){\r\n                grid[x][y].distance = 1 + grid[top.x][top.y].distance;\r\n                grid[x][y].x = top.x;\r\n                grid[x][y].y = top.y;\r\n\r\n                visitedNodes.push({x,y});\r\n                priority_queue.push({cost: grid[x][y].distance, x, y});\r\n            }\r\n        }\r\n    }\r\n    return {path,visitedNodes,error:\"path is not found\"};\r\n}\r\n\r\n\r\nexport default Dijkstra;","\r\nvar dx = [+2,-2,0,0]\r\nvar dy = [0,0,+2,-2]\r\n\r\nvar vis = [];\r\nvar visitedNodes = [];\r\n\r\nfunction Randomized_dfs(N,M){\r\n    visitedNodes = [];\r\n    vis = new Array(N);\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push(false);\r\n        }\r\n        vis[i] = arr;\r\n    }\r\n    dfs(1,1,N,M);\r\n    return visitedNodes;\r\n}\r\n// this function is a iterative DFS\r\nfunction dfs(r,c,N,M){\r\n    vis[r][c] = true;\r\n    visitedNodes.push({r,c});\r\n\r\n    var s = [] // stack()\r\n    s.push({x:r,y:c});\r\n    while(s.length > 0){\r\n        let top = s[s.length-1];\r\n\r\n        let neighbours = getNeighbors(top,N,M);\r\n        if(neighbours.length){\r\n            let ren_id = (Math.floor(Math.random()*10))%neighbours.length;\r\n            goForward(top.x,top.y,neighbours[ren_id][0],neighbours[ren_id][1]);\r\n            s.push({x:neighbours[ren_id][0], y: neighbours[ren_id][1]});\r\n            vis[neighbours[ren_id][0]][neighbours[ren_id][1]] = true;\r\n        }\r\n        else s.pop();\r\n    }\r\n} \r\n// pr => parent-row\r\nfunction goForward(pr,pc,r,c){\r\n    if(r===pr){\r\n        if(c < pc) for(let i=pc-1; i>=c; i--)visitedNodes.push({r,c:i});\r\n        else for(let i=pc+1; i<=c; i++) visitedNodes.push({r,c:i});\r\n                \r\n    }\r\n    else{\r\n        if(r < pr) for(let i=pr-1; i>=r; i--) visitedNodes.push({r:i,c});\r\n        else for(let i=pr+1; i<=r; i++)visitedNodes.push({r:i,c});\r\n    }\r\n}\r\n\r\nfunction getNeighbors(top,N,M){\r\n    let arr = [];\r\n    for(let i=0; i<4; i++){\r\n        let x = top.x + dx[i];\r\n        let y = top.y + dy[i];\r\n        if(x>=0 && y>=0 && x<N && y<M && !vis[x][y]){\r\n            arr.push([x,y]);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default Randomized_dfs;\r\n","var vis = [];\r\nvar visitedNodes = [];\r\n\r\nfunction recursiveDivision(N,M){\r\n    visitedNodes = [];\r\n    vis = new Array(N);\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push(false);\r\n        }\r\n        vis[i] = arr;\r\n    }\r\n    //All around of the grid..\r\n    for(let i=0; i<M; i++){\r\n        visitedNodes.push({r:0,c:i});\r\n        vis[0][i] = true;\r\n    }\r\n    for(let i=1; i<N; i++){\r\n        visitedNodes.push({r:i,c:M-1});\r\n        vis[i][M-1] = true;\r\n    }\r\n    for(let i=M-2; i>=0; i--){\r\n        visitedNodes.push({r:N-1,c:i});\r\n        vis[N-1][i] = true;\r\n    }\r\n    for(let i=N-2; i>0; i--){\r\n        visitedNodes.push({r:i,c:0});\r\n        vis[i][0] = true;\r\n    }\r\n\r\n    divide(1,N-2,1,M-2);\r\n    return visitedNodes;\r\n}\r\n\r\nfunction divide(startRow,endRow,startCol,endCol){\r\n    if(endRow-startRow<=1 && endCol-startCol<=1) return;\r\n    if(endRow-startRow > endCol-startCol){\r\n        let mid = Math.floor((startRow+endRow)/2);\r\n        let ran_id = Math.floor((Math.random()*100)%(endCol-startCol+1))+startCol;\r\n\r\n        let start = startCol;\r\n        if(vis[mid][startCol-1]===false){\r\n            ran_id = start;\r\n            start++;\r\n        }\r\n        let end = endCol;\r\n        if(vis[mid][endCol+1]===false){\r\n            ran_id = end;\r\n            end--;\r\n        }\r\n        for(let i=start; i<=end; i++){\r\n            if(i !== ran_id){\r\n                visitedNodes.push({r:mid,c:i});\r\n                vis[mid][i] = true;\r\n            }\r\n        }\r\n        divide(startRow,mid-1,startCol,endCol);\r\n        divide(mid+1,endRow,startCol,endCol);\r\n    }\r\n    else{\r\n        let mid = Math.floor((startCol+endCol)/2);\r\n        let ran_id = Math.floor((Math.random()*100)%(endRow-startRow+1))+startRow;\r\n\r\n        let start = startRow;\r\n        if(vis[startRow-1][mid]===false){\r\n            ran_id = start;\r\n            start++;\r\n        }\r\n        let end = endRow;\r\n        if(vis[end+1][mid]===false){\r\n            ran_id = end;\r\n            end--;\r\n        }\r\n        for(let i=start; i<=end; i++){\r\n            if(i !== ran_id){\r\n                visitedNodes.push({r:i,c:mid});\r\n                vis[i][mid] = true;\r\n            }\r\n        }\r\n        divide(startRow,endRow,startCol,mid-1);\r\n        divide(startRow,endRow,mid+1,endCol);\r\n    }\r\n}\r\n\r\nexport default recursiveDivision;","import React from 'react'\r\nimport '../styles/navbar.css';\r\n\r\nfunction Navbar({msg}) {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div>\r\n        <a className='navbarlink' href='/algorithms-visualizer'>\r\n          Home\r\n        </a>\r\n      </div>\r\n      <div className=\"nav-title\">\r\n        <div className=\"nav-title-hd\">{msg}</div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nexport default Navbar;","import React,{useEffect, useState} from 'react'\r\nimport '../styles/PathfindingVS.css';\r\nimport Astar from '../algorithm/path/A_star_algo';\r\nimport basicMaze from '../algorithm/maze/basic-maze';\r\nimport BFS from '../algorithm/path/bfs';\r\nimport DFS from '../algorithm/path/dfs';\r\nimport Dijkstra from '../algorithm/path/dijkstra';\r\nimport Randomized_dfs from '../algorithm/maze/randomized_dfs';\r\nimport recursiveDivision from '../algorithm/maze/recursive_division';\r\nimport Navbar from '../components/Navbar';\r\n\r\n/*\r\nsuper(props);// call the super class constructor and pass in the props parameter\r\n*/\r\n\r\nvar rows = 17;\r\nvar cols = 31;\r\n\r\nvar START_NODE_ROW = 4, START_NODE_COL = 6;\r\nvar END_NODE_ROW = rows-6, END_NODE_COL = cols-6;\r\nvar InitSR = START_NODE_ROW, InitSC = START_NODE_COL;\r\nvar InitER = END_NODE_ROW, InitEC = END_NODE_COL;\r\n\r\nvar animateTime = 35; // 8,35,80\r\n\r\nfunction App(){\r\n    const [Grid,setGrid] = useState([]);  // array destructuring\r\n    const [isMousePress,setIsMousePress] = useState(false);\r\n    const [mazeID,setMazeID] = useState(0);\r\n    const [pathID,setPathID] = useState(0);\r\n    const [animateType,setAnimateTimeType] = useState(2);\r\n\r\n\r\n    useEffect(()=>{\r\n        gridInitialize();\r\n    },[])\r\n\r\n    const gridInitialize =()=>{\r\n        var grid = new Array(rows);\r\n        for(let i=0; i<rows; i++) grid[i] = new Array(cols);\r\n\r\n        for(let i=0; i<rows; i++){\r\n            for(let j=0; j<cols; j++){\r\n                grid[i][j] = new Spot(i,j);\r\n            }\r\n        }\r\n        /* -- add neighbors of each node ---\r\n        for(let i=0; i<rows; i++){\r\n            for(let j=0; j<cols; j++){\r\n                grid[i][j].getNeighbors(grid);\r\n            }\r\n        } */\r\n        setGrid(grid);\r\n    }\r\n    // animate the algorithm\r\n    async function animateVisitedNodes(visitedNodes){\r\n        for(let i=0; i<visitedNodes.length; i++){\r\n            const node = visitedNodes[i];\r\n            await waitForAnimatoin(animateTime);\r\n            if(node.x === START_NODE_ROW && node.y === START_NODE_COL)\r\n            document.getElementById(`row${node.x}_col${node.y}`).className = \"node-visited START_NODE\";\r\n\r\n            else if(node.x === END_NODE_ROW && node.y === END_NODE_COL)\r\n            document.getElementById(`row${node.x}_col${node.y}`).className = \"node-visited END_NODE\";\r\n\r\n            else document.getElementById(`row${node.x}_col${node.y}`).className = \"node-visited\";\r\n        }\r\n    }\r\n    async function animateShortestPath(pathNode){\r\n        pathNode.reverse();\r\n        for(let i=0; i<pathNode.length; i++){\r\n            const node = pathNode[i];\r\n            await waitForAnimatoin(animateTime);\r\n            if(i===0) \r\n            document.getElementById(`row${node.x}_col${node.y}`).className = \"shortestPath START_NODE\";\r\n            else if(i+1 === pathNode.length) \r\n            document.getElementById(`row${node.x}_col${node.y}`).className = \"shortestPath END_NODE\";\r\n            else document.getElementById(`row${node.x}_col${node.y}`).className = \"shortestPath\";\r\n        }\r\n    }\r\n\r\n    const pathFinding = async () =>{\r\n        var startNode = Grid[START_NODE_ROW][START_NODE_COL];\r\n        var endNode = Grid[END_NODE_ROW][END_NODE_COL];\r\n\r\n        switch(pathID){\r\n            case 1:\r\n                var obj = BFS(Grid,startNode,endNode,rows,cols);\r\n                await animateVisitedNodes(obj.visitedNodes);\r\n                animateShortestPath(obj.path);\r\n            break;\r\n            case 2:\r\n                obj = DFS(Grid,startNode,endNode,rows,cols);\r\n                await animateVisitedNodes(obj.visitedNodes);\r\n                animateShortestPath(obj.path);\r\n            break;\r\n            case 3:\r\n                obj = Dijkstra(Grid,startNode,endNode,rows,cols);\r\n                await animateVisitedNodes(obj.visitedNodes);\r\n                animateShortestPath(obj.path);\r\n            break;\r\n            default:\r\n                obj = Astar(Grid,startNode,endNode,rows,cols);\r\n                await animateVisitedNodes(obj.close_list);\r\n                animateShortestPath(obj.path);\r\n            break;\r\n        }\r\n    }\r\n\r\n    const mazeGenerator = async (ar) =>{\r\n        for(var i=0; i<ar.length; i++){\r\n            if((ar[i].r===START_NODE_ROW && ar[i].c===START_NODE_COL) || \r\n            (ar[i].r===END_NODE_ROW && ar[i].c===END_NODE_COL)) continue;\r\n                await waitForAnimatoin(animateTime);\r\n                createWall(ar[i].r,ar[i].c);\r\n        }\r\n    }\r\n    const makeAllCellAsAWall = () =>{\r\n        for(let i=0; i<rows; i++){\r\n            for(let j=0; j<cols; j++){\r\n                if(!((i===START_NODE_ROW && j===START_NODE_COL) || (i===END_NODE_ROW && j===END_NODE_COL))){\r\n                    createWall(i,j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const mazeHandle = async () =>{        \r\n        var arr = [];\r\n        switch(mazeID){\r\n            case 1:\r\n                arr = basicMaze(rows,cols);\r\n                mazeGenerator(arr);\r\n            break;\r\n            case 2:\r\n                makeAllCellAsAWall();\r\n                arr = Randomized_dfs(rows,cols);\r\n                mazeGenerator(arr);\r\n            break;\r\n            case 3: // recursive division\r\n                arr = recursiveDivision(rows,cols);\r\n                mazeGenerator(arr);\r\n            break;\r\n            default:\r\n        }\r\n    }\r\n    const clearPathHandle = () =>{\r\n        for(let i=0; i<rows; i++){\r\n            for(let j=0; j<cols; j++){\r\n                if(i===START_NODE_ROW && j===START_NODE_COL){\r\n                    document.getElementById(`row${i}_col${j}`).className = \"square START_NODE\";\r\n                }\r\n                else if(i===END_NODE_ROW && j===END_NODE_COL){\r\n                    document.getElementById(`row${i}_col${j}`).className = \"square END_NODE\";\r\n                }\r\n                else if(!Grid[i][j].isWall)\r\n                document.getElementById(`row${i}_col${j}`).className = \"square\";\r\n            }\r\n        }\r\n    }\r\n\r\n    const createWall=(row,col)=>{\r\n        /*\r\n            ********* the concept should be known array reference and copy *****\r\n        */\r\n        var newGrid = [...Grid] // array copy\r\n        var node = newGrid[row][col];\r\n        node.isWall = !node.isWall;\r\n        newGrid[row][col] = node;\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const onMouseDown = (row,col)=>{\r\n        if(isValid(row,col)){\r\n            setIsMousePress(true);\r\n            createWall(row,col);\r\n        }\r\n    }\r\n    const onMouseEnter = (row,col)=>{\r\n        if(isMousePress === true && isValid(row,col)){\r\n            createWall(row,col);\r\n        }\r\n    }\r\n    const onMouseUp = ()=>{\r\n        setIsMousePress(()=>false);\r\n    }\r\n    const animationTimeHandle = (type) =>{\r\n        if(type === 1) animateTime = 8;\r\n        else if(type === 2) animateTime = 35;\r\n        else animateTime = 80;\r\n        setAnimateTimeType(type);\r\n    }\r\n\r\n    const setStartEndNode = (id, r, c) =>{\r\n        if(id === 1){\r\n            let newGrid = [...Grid] // array copy\r\n            let preStartNode = newGrid[START_NODE_ROW][START_NODE_COL];\r\n            let curStartNode = newGrid[r][c];\r\n            preStartNode.isStart = !preStartNode.isStart;\r\n            curStartNode.isStart = !curStartNode.isStart;\r\n            setGrid(newGrid);\r\n\r\n            START_NODE_ROW = r;\r\n            START_NODE_COL = c;\r\n        }\r\n        else{\r\n            let newGrid = [...Grid] // array copy\r\n            let preEndNode = newGrid[END_NODE_ROW][END_NODE_COL];\r\n            let curEndNode = newGrid[r][c];\r\n            preEndNode.isEnd = !preEndNode.isEnd;\r\n            curEndNode.isEnd = !curEndNode.isEnd;\r\n            setGrid(newGrid);\r\n\r\n            END_NODE_ROW = r;\r\n            END_NODE_COL = c;\r\n        } \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Navbar msg='Path Finder Visualizer'></Navbar>\r\n        <div className='path-container'>\r\n\r\n            <div className='path-header'>\r\n                    <div>\r\n                        <div style={{\"display\":\"flex\",\"margin\":\"6px auto\"}}>\r\n                            <div>\r\n                                <button className='button-4 start-btn' onClick={pathFinding}>Find the possible path</button>\r\n                            </div>\r\n                            <div>\r\n                                <select className='my-drop-down' value={pathID} onChange={(e)=>{setPathID(parseInt(e.target.value))}}>\r\n                                    <option value=\"0\">A-Star Search</option>\r\n                                    <option value=\"1\">Breadth-First Search</option>\r\n                                    <option value=\"2\">Depth-First Search</option>\r\n                                    <option value=\"3\">Dijkstra</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                        <div className='path-speed-btns'>\r\n                            <button className={`button-4 ${animateType===1 && 'curr-speed-btn'}`} onClick={()=>animationTimeHandle(1)}>Fast</button>\r\n                            <button className={`button-4 ${animateType===2 && 'curr-speed-btn'}`} onClick={()=>animationTimeHandle(2)}>Average</button>\r\n                            <button className={`button-4 ${animateType===3 && 'curr-speed-btn'}`} onClick={()=>animationTimeHandle(3)}>Slow</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <div style={{\"display\":\"flex\",\"margin\":\"6px auto\"}}>\r\n                            <select className='my-drop-down' value={mazeID} onChange={(e)=>{setMazeID(parseInt(e.target.value))}}>\r\n                                <option className='my-drop-down-option' disabled value=\"0\">Select Maze</option>\r\n                                <option value=\"1\">Random basic maze</option>\r\n                                <option value=\"2\">Randomized_dfs</option>\r\n                                <option value=\"3\">Recursive division</option>\r\n                                {/* <option value=\"4\">Kruskal's algorithm</option>\r\n                                <option value=\"5\">Prim's algorithm</option> */}\r\n                            </select>\r\n                            <button className='button-4 start-maze-btn' onClick={mazeHandle}>Create Maze</button>\r\n                            <button className='button-4' onClick={gridInitialize}>Clear walls</button>\r\n                        </div>\r\n                        <div style={{\"display\":\"flex\"}}>\r\n                            <button className='button-4' onClick={clearPathHandle}>Clear path</button>\r\n                            <button className='button-4' onClick={()=>{\r\n                                START_NODE_ROW = InitSR;\r\n                                START_NODE_ROW = InitSC;\r\n                                END_NODE_ROW = InitER;\r\n                                END_NODE_COL = InitEC;\r\n                                clearPathHandle();\r\n                                gridInitialize();\r\n                            }}>\r\n                                Reset board\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n            \r\n            <div className='grid'>\r\n                <div onMouseLeave={()=>{setIsMousePress(false)}}>\r\n                {/* JSX Node Of Grid (2D Array) */}\r\n                {Grid.map((R,idx_r)=>{\r\n                return (<div key={idx_r} className='ROW'>\r\n                            {R.map((Value,idx_c)=>{\r\n                                    const {x,y,isStart,isEnd,isWall} = Value;\r\n                                    return <Node key={idx_c} \r\n                                    pv={{x,y,isStart,isEnd,isWall,onMouseDown,onMouseEnter,onMouseUp,setStartEndNode}}>\r\n                                    </Node>\r\n                                })\r\n                            }\r\n                        </div>)\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nclass Spot {\r\n    constructor(i, j) {\r\n        this.x = i;\r\n        this.y = j;\r\n        this.isWall = false;\r\n        this.isStart = (i===START_NODE_ROW && j===START_NODE_COL);\r\n        this.isEnd = (i===END_NODE_ROW && j===END_NODE_COL);\r\n        \r\n        /*\r\n        ----  below information we don't use after 16 number of commits in github ---\r\n        this.f = 1e9;\r\n        this.g = 1e9;\r\n        this.previous = undefined;\r\n        this.neighbors = [];\r\n        this.getNeighbors = function(grid){\r\n            if(i > 0) this.neighbors.push(grid[i-1][j]); // up\r\n            if(j > 0) this.neighbors.push(grid[i][j-1]); // left\r\n\r\n            if(i+1<rows) this.neighbors.push(grid[i+1][j]); // down\r\n            if(j+1<cols) this.neighbors.push(grid[i][j+1]); // right\r\n        }\r\n        */\r\n    }\r\n}\r\n\r\nfunction Node({pv}){\r\n    const {x,y,isStart,isEnd,isWall,onMouseDown,onMouseEnter,onMouseUp,setStartEndNode} = pv;\r\n    const allowDrop=(e)=>{e.preventDefault();}\r\n    const drag=(e)=>{e.dataTransfer.setData(\"myID\", e.target.id);}\r\n    const drop=(e)=>{\r\n        e.preventDefault();\r\n        var data = e.dataTransfer.getData(\"myID\");\r\n        var dom = document.getElementById(data);\r\n        var id = parseInt(dom.attributes.data_type.value);\r\n        if(e.target.attributes.data_type.value !== \"3\" || e.target.attributes.wall.value === \"true\") return;\r\n        \r\n        // call the function\r\n        var r = parseInt(e.target.attributes.data_x.value)\r\n        var c = parseInt(e.target.attributes.data_y.value)\r\n        setStartEndNode(id,r,c);\r\n    }\r\n\r\n    var classNode = isStart?\"START_NODE\":(isEnd?\"END_NODE\":(isWall?\"obtacle\":\"\"));\r\n    var typeId = isStart?\"1\":(isEnd?\"2\":\"3\");\r\n\r\n    if(isStart || isEnd){\r\n        return (\r\n            <div \r\n            className={'square '+classNode} id={'row'+x+'_col'+y}\r\n            data_x={x} \r\n            data_y={y} \r\n            data_type={typeId} \r\n            wall=\"false\"\r\n            draggable=\"true\"\r\n            onDragStart={drag} \r\n            onDrop={drop} \r\n            onDragOver={allowDrop}\r\n            >\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <div onMouseDown={(e)=>{\r\n                e.preventDefault(); // it is necessary\r\n                onMouseDown(x,y)}\r\n            } \r\n            onMouseEnter={(e)=>{\r\n                e.preventDefault();\r\n                onMouseEnter(x,y)}\r\n            } \r\n            onMouseUp={(e)=>{\r\n                e.preventDefault();\r\n                onMouseUp()}\r\n            } \r\n            className={'square '+classNode} id={'row'+x+'_col'+y}\r\n            data_x={x} \r\n            data_y={y} \r\n            data_type={typeId} \r\n            wall={isWall.toString()}\r\n            onDrop={drop} \r\n            onDragOver={allowDrop}\r\n            >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nasync function waitForAnimatoin(time){\r\n    return new Promise((resolve)=>{\r\n        setTimeout(()=>{\r\n            resolve('');\r\n        },time)\r\n    })\r\n}\r\nconst isValid = (r,c) =>{\r\n    if((r===START_NODE_ROW && c===START_NODE_COL) || (r===END_NODE_ROW && c===END_NODE_COL)) return 0;\r\n    else return 1;\r\n}\r\nexport default App;","import React from 'react';\r\nimport '../styles/card.css';\r\n\r\nfunction Card(props) {\r\n  const [imgURL,text] = props.array;\r\n  return (\r\n    <div className='card-body'>\r\n      <div>\r\n        <img className='card-img' src={imgURL} alt=\"\"></img>\r\n      </div>\r\n      <div className='card-bottom'>\r\n        <p>{text}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport '../styles/footer.css'\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className='footer'>\r\n        <p>Copyright <span>&#9400;</span> Suaeb Ahmed - All Rights Reversed.</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Card from '../components/Card';\r\nimport Footer from '../components/Footer';\r\nimport Navbar from '../components/Navbar'\r\nimport '../styles/home.css';\r\nimport img1 from '../icons/path-finding.png';\r\nimport img2 from '../icons/sort-algo.png';\r\nimport img3 from '../icons/prime-spiral.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar msg={'Wellcome To Our Algorithm Visualizer'}></Navbar>\r\n      <h1 style={{\"textAlign\": \"center\"}}>Here, I implemented these Algorithmic Projects</h1>\r\n\r\n      <div className='cards-container'>\r\n        <Link className='no_underline' to=\"/path-finding\">\r\n          <Card array={[img1,\"Path-Finder\"]}/>\r\n        </Link>\r\n        <Link className='no_underline' to=\"/sorting\">\r\n          <Card array={[img2,\"Sorting Algorithms\"]}/>\r\n        </Link>\r\n        <Link className='no_underline' to=\"/spiral-prime\">\r\n          <Card array={[img3,\"Spiral Primes\"]}/>\r\n        </Link>\r\n      </div>\r\n\r\n      {/* Footer only has for Home */}\r\n      <Footer></Footer> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from 'react';\r\nimport '../styles/Bubble.css';\r\nimport Navbar from '../components/Navbar';\r\n\r\nvar BARS = 100;\r\nconst barWidth = 20;\r\nvar SPEED = 500;\r\n\r\nasync function waitForAnimate(sp){\r\n    sp = sp < 5? 5 : sp;\r\n    return new Promise((resolve)=>{\r\n        setTimeout(()=>{resolve('')},sp);\r\n    })\r\n}\r\n\r\n/*\r\n    ** https://blog.logrocket.com/why-react-doesnt-update-state-immediately/\r\n\r\n    // speed variable doesn't work but work for global variable\r\n    // it's need for input range dom update\r\n*/\r\n\r\nfunction SortingApp(){\r\n    const [bar,setBar] = useState([80,40,20,70,30]);\r\n    var [speed,setSpeed] = useState(SPEED); \r\n    const [sortID,setSortID] = useState(3);\r\n\r\n    useEffect(()=>{\r\n       init(); \r\n    },[])\r\n\r\n    const init=()=>{\r\n        var arr = [];\r\n        for(let i=0; i<BARS; i++){\r\n            let x = Math.floor(Math.random()*1000)%400;\r\n            arr.push(x);\r\n        }\r\n        setBar(arr);\r\n    }\r\n    var ORGINAL_COLOR = '#3498DB';\r\n    var COMP_COLOR = '#FF5959';\r\n    var SORTED_COLOR = '#6C3483';\r\n    var PIVOT_COLOR = 'orange';\r\n\r\n    const swap = (i,j,newBars) => {\r\n        document.getElementById('bar-'+i).style.height = newBars[j]+'px';\r\n        document.getElementById('bar-'+j).style.height = newBars[i]+'px';\r\n\r\n        var tmp = newBars[i];\r\n        newBars[i] = newBars[j];\r\n        newBars[j] = tmp;\r\n    }\r\n    // -----------  All Sorting Algorithm  -----------\r\n    async function bubbleSort(){\r\n        var newBars = []; //copy the array\r\n        for(let i=0; i<bar.length; i++) newBars.push(bar[i]);\r\n\r\n        for(var i=0; i<newBars.length; i++){\r\n            for(var j=0; j<newBars.length-1-i; j++){\r\n                \r\n                document.getElementById('bar-'+j).style.background =  COMP_COLOR;\r\n                document.getElementById('bar-'+(j+1)).style.background = COMP_COLOR;\r\n                // we control animation speed with async/await and Promise.\r\n                await waitForAnimate(SPEED); // global var\r\n                document.getElementById('bar-'+j).style.background = ORGINAL_COLOR\r\n                document.getElementById('bar-'+(j+1)).style.background = ORGINAL_COLOR;\r\n\r\n\r\n                if(newBars[j] > newBars[j+1]){\r\n                    swap(j,j+1,newBars);\r\n                }\r\n            }\r\n            var sorted = newBars.length-1-i;\r\n            document.getElementById('bar-'+sorted).style.background = SORTED_COLOR;\r\n        }\r\n    }\r\n    async function selectionSort(){\r\n        var newBars = [];\r\n        for(let i=0; i<bar.length; i++) newBars.push(bar[i]);\r\n        \r\n        for(var i=0; i<newBars.length; i++){\r\n            var leastIdx = i;\r\n            document.getElementById('bar-'+leastIdx).style.background = 'black';\r\n\r\n            for(var j=i+1; j<newBars.length; j++){\r\n                document.getElementById('bar-'+j).style.background = COMP_COLOR;\r\n                await waitForAnimate(SPEED); // global var\r\n                document.getElementById('bar-'+j).style.background = ORGINAL_COLOR;\r\n\r\n                if(newBars[j] < newBars[leastIdx]){\r\n                    document.getElementById('bar-'+leastIdx).style.background = ORGINAL_COLOR;\r\n                    leastIdx = j;\r\n                    document.getElementById('bar-'+leastIdx).style.background = 'black';\r\n                }\r\n            }\r\n            // swap\r\n            swap(i,leastIdx,newBars);\r\n            document.getElementById('bar-'+leastIdx).style.background = ORGINAL_COLOR;\r\n            document.getElementById('bar-'+i).style.background = SORTED_COLOR\r\n        }\r\n    }\r\n    const insertionSort = async () =>{\r\n        var newBars = [];\r\n        for(let i=0; i<bar.length; i++) newBars.push(bar[i]);\r\n        \r\n        for(var i=1; i<newBars.length; i++){\r\n            var tmp = newBars[i], j = i-1;\r\n            document.getElementById('bar-'+i).style.transform = 'translateY(15px)'\r\n\r\n            while(j>=0 && newBars[j] > tmp){\r\n                document.getElementById('bar-'+j).style.background = COMP_COLOR;\r\n                document.getElementById('bar-'+(j+1)).style.background = PIVOT_COLOR;\r\n\r\n                await waitForAnimate(SPEED);\r\n                newBars[j+1] = newBars[j];\r\n                document.getElementById('bar-'+(j+1)).style.height = newBars[j]+'px';\r\n                document.getElementById('bar-'+(j+1)).style.background = SORTED_COLOR;\r\n                j--;\r\n            }\r\n            newBars[j+1] = tmp;\r\n            document.getElementById('bar-'+(j+1)).style.height = tmp+'px';\r\n            document.getElementById('bar-'+(j+1)).style.background = SORTED_COLOR;\r\n            document.getElementById('bar-'+i).style.transform = 'translateY(0px)';\r\n        }\r\n    }\r\n    const partition = async (low,high,array) =>{\r\n        let pivot = high, i = low;\r\n        document.getElementById('bar-'+pivot).style.background = PIVOT_COLOR;\r\n\r\n        for(let j=low; j<high; j++){\r\n            document.getElementById('bar-'+j).style.background = COMP_COLOR;\r\n            document.getElementById('bar-'+i).style.background = COMP_COLOR;\r\n            await waitForAnimate(SPEED);\r\n            document.getElementById('bar-'+j).style.background = ORGINAL_COLOR;\r\n            document.getElementById('bar-'+i).style.background = ORGINAL_COLOR;\r\n\r\n            if(array[j] <= array[pivot]){\r\n                swap(i,j,array);\r\n                i++;\r\n            }\r\n        }\r\n        swap(i,pivot,array);\r\n        document.getElementById('bar-'+pivot).style.background = ORGINAL_COLOR;\r\n        return i;\r\n    }\r\n\r\n    const quickSort = async (low,high,array) =>{\r\n        if(low >= high) return;\r\n        let pi = await partition(low,high,array);\r\n        await quickSort(low,pi-1,array);\r\n        await quickSort(pi+1,high,array);            \r\n    }\r\n\r\n    const mergeSort = async (low,high,array) =>{\r\n        if(low >= high) return;\r\n        var mid = Math.floor((low+high)/2);\r\n        await mergeSort(low,mid,array)\r\n        await mergeSort(mid+1,high,array);\r\n\r\n        // merge the array\r\n        // console.log(low,high, mid);\r\n\r\n        var newArr1 = [], newArr2 = [];\r\n        for(let i=low; i<=mid; i++){\r\n            newArr1.push({x:array[i],idx:i});\r\n        }\r\n        for(let i=mid+1; i<=high; i++){\r\n            newArr2.push({x:array[i],idx:i});\r\n        }\r\n        let i=0, j = 0, k = low;\r\n        while(i<newArr1.length && j<newArr2.length){\r\n            document.getElementById('bar-'+newArr1[i].idx).style.background = COMP_COLOR;\r\n            document.getElementById('bar-'+newArr2[j].idx).style.background = COMP_COLOR;\r\n            await waitForAnimate(SPEED);\r\n            document.getElementById('bar-'+newArr1[i].idx).style.background = SORTED_COLOR;\r\n            document.getElementById('bar-'+newArr2[j].idx).style.background = SORTED_COLOR;\r\n\r\n            if(newArr1[i].x < newArr2[j].x){\r\n                array[k] = newArr1[i].x;\r\n                document.getElementById('bar-'+k).style.height = array[k]+'px';\r\n                i++;\r\n            }\r\n            else{\r\n                array[k] = newArr2[j].x;\r\n                document.getElementById('bar-'+k).style.height = array[k]+'px';\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n        while(i<newArr1.length){\r\n            array[k] = newArr1[i].x;\r\n            document.getElementById('bar-'+k).style.height = array[k]+'px';\r\n            document.getElementById('bar-'+k).style.background = SORTED_COLOR;\r\n            i++;\r\n            k++;\r\n        }\r\n        while(j<newArr2.length){\r\n            array[k] = newArr2[j].x;\r\n            document.getElementById('bar-'+k).style.height = array[k]+'px';\r\n            document.getElementById('bar-'+k).style.background = SORTED_COLOR;\r\n            j++;\r\n            k++;\r\n        }\r\n    }\r\n    // -----------  End Sorting Algorithm  ----------\r\n\r\n    const startSortingHandle = async () =>{\r\n        var newBars = [];\r\n        switch(sortID){\r\n            case 1:\r\n                selectionSort();\r\n            break;\r\n            case 2:\r\n                insertionSort();\r\n            break;\r\n            case 3:\r\n                for(let i=0; i<bar.length; i++) newBars.push(bar[i]); \r\n                await quickSort(0,newBars.length-1,newBars);\r\n            break;\r\n            case 4:\r\n                newBars = [];\r\n                for(let i=0; i<bar.length; i++) newBars.push(bar[i]); \r\n                await mergeSort(0,newBars.length-1,newBars);\r\n            break;\r\n            default:\r\n                bubbleSort();\r\n            break;\r\n        }\r\n    }\r\n\r\n    const printAllBar = (\r\n            bar.map((item,id)=>{\r\n                return(\r\n                    <div className='bar' id={'bar-'+id} key={id} \r\n                    style={{width:barWidth,height:item}}>\r\n                    </div>\r\n                )\r\n            })\r\n    )\r\n    const rangeValueHandle = (event) =>{    \r\n        SPEED = parseInt(event.target.max)-parseInt(event.target.value);\r\n        setSpeed(event.target.valueAsNumber);\r\n    }\r\n    const sizeHandle = (e) =>{\r\n        BARS = parseInt(e.target.value);\r\n        generateNewArray();\r\n    }\r\n    const generateNewArray = () =>{\r\n        var arr = [];\r\n        for(let i=0; i<BARS; i++){\r\n            let x = Math.floor(Math.random()*1000)%400;\r\n            arr.push(x);\r\n        }\r\n        for(let i=0; i<bar.length; i++){\r\n            var dom = document.getElementById('bar-'+i);\r\n            dom.style.backgroundColor = '#3498DB';\r\n        }\r\n        setBar(arr);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar msg='Sorting Algorithms'></Navbar>\r\n            <div className='sorting-continer'>\r\n                <div className='Btn-Wrap'>\r\n                    <div style={{\"display\":\"flex\"}}>\r\n                        <button className='button-4 start-btn' onClick={startSortingHandle}>Start Sorting</button>\r\n                        <button className='button-4' onClick={generateNewArray}>Generate New</button>\r\n                        <select className='my-drop-down' value={sortID} onChange={(e)=>{setSortID(parseInt(e.target.value));generateNewArray()}} id=\"num\" name=\"num\">\r\n                                <option value=\"0\">Bubble Sort</option>\r\n                                <option value=\"1\">Selection Sort</option>\r\n                                <option value=\"2\">Insertion Sort</option>\r\n                                <option value=\"3\">Quick Sort</option>\r\n                                <option value=\"4\">Merge Sort</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className='st-speed-range'>\r\n                        <div className='st-speed-range-lavel'>\r\n                            <label className='sorting-label' htmlFor='range1'>Speed: </label>\r\n                        </div>\r\n                        <div>\r\n                            <input type='range' onChange={rangeValueHandle} name='range1' id = 'range1'\r\n                            min='1' value={speed} max='1000' step='1'></input>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor='num'>Choose Size: </label>\r\n                        <select className='my-drop-down' value={bar.length} onChange={sizeHandle} id=\"num\" name=\"num\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"200\">200</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className='wrapperBar'>\r\n                {printAllBar}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SortingApp;","\r\nfunction prime_Spiral_Generate(N){\r\n\r\n    var row = Math.floor(N/2);\r\n    var col = Math.floor(N/2);\r\n    var num = 1, step = 1;\r\n    var list = [];\r\n\r\n    for(let k = 0; k<Math.floor(N/2); k++){\r\n        for(let i=0; i<step; i++){\r\n            list.push({r: row,c: col++, num: num++, direction: 1});\r\n        }\r\n        for(let j=0; j<step; j++){\r\n            list.push({r: row--,c: col, num: num++, direction: 2});\r\n        }\r\n        step++;\r\n        for(let i=0; i<step; i++){\r\n            list.push({r: row,c: col--, num: num++, direction: 3});\r\n\r\n        }\r\n        for(let j=0; j<step; j++){\r\n            list.push({r: row++,c: col, num: num++, direction: 4});\r\n        }\r\n        step++;\r\n    }\r\n    for(let i=1; i<step; i++){\r\n        list.push({r: row,c: col++, num: num++, direction: 1});\r\n    }\r\n    return list;\r\n}\r\n\r\nexport default prime_Spiral_Generate;","import React, { useState, useEffect } from 'react'\r\nimport '../styles/PrimeSpiral.css'\r\nimport prime_Spiral_Generate from '../algorithm/prime_spiral';\r\nimport Navbar from '../components/Navbar';\r\n\r\n// Density of primes = n/ln(n);\r\nconst N = 21;\r\n\r\nfunction PrimeApp(){\r\n    const[Grid,setGrid] = useState([]);\r\n    const[cntPrime, setCntPrime] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        gridInitialize();\r\n    },[])\r\n\r\n    const gridInitialize =()=>{\r\n        var grid = new Array(N);\r\n        for(let i=0; i<N; i++) grid[i] = new Array(N);\r\n        let c = 0;\r\n        for(let i=0; i<N; i++){\r\n            for(let j=0; j<N; j++){\r\n                grid[i][j] = ++c;\r\n            }\r\n        }\r\n        setGrid(grid);\r\n    }\r\n\r\n    const gridOfNode = (\r\n        Grid.map((R,idx_r)=>{\r\n            return (\r\n                <div key={idx_r} className='ROW'>\r\n                    {\r\n                        R.map((value,idx_c)=>{\r\n                            return (\r\n                                <div key={idx_c} className='primeSquare' id={'node-row'+idx_r+'-col'+idx_c}>\r\n                                    <div></div>\r\n                                    <div className='rectangle'></div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n    const isPrime = (n) =>{\r\n        if(n < 2) return false;\r\n        for(let i=2; i*i<=n; i++){\r\n            if(n%i===0) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const startPrimeSpiral = async () =>{\r\n        var arr = prime_Spiral_Generate(N);\r\n        var c = 0;\r\n        for(let i=0; i<arr.length; i++){\r\n\r\n            var node = document.getElementById('node-row'+arr[i].r+'-col'+arr[i].c);\r\n            if(isPrime(arr[i].num)){\r\n                node.children[0].className = 'circle';\r\n                setCntPrime(++c);\r\n            }\r\n            node.children[1].className = 'rectangle-'+arr[i].direction;\r\n            await waitForAnimatoin(60);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Navbar msg='Spiral Primes'></Navbar>\r\n            <div className='spiral-continer'>\r\n                <button className='button-4 start-btn' onClick={startPrimeSpiral}>Show Prime spiral</button>\r\n                <button className='button-4'>{cntPrime} prime numbers found out of {N*N}</button>\r\n\r\n                <div className='primeGridContainer'>\r\n                    <div>\r\n                    {gridOfNode}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nasync function waitForAnimatoin(animation_time){\r\n    return new Promise((resolve)=>{\r\n        setTimeout(()=>{\r\n            resolve('');\r\n        },animation_time)\r\n    })\r\n}\r\nexport default PrimeApp;","import React from 'react';\nimport {\n  Routes,\n  Route\n} from \"react-router-dom\";\nimport './App.css'\nimport PathfindingVS from './Pages/PathfindingVS'\nimport Home from './Pages/Home';\nimport SortingApp from './Pages/BubbleSort';\nimport PrimeApp from './Pages/PrimeSpiral';\n\nfunction App() {\n\n  return (\n      <div className=\"App\">\n          <Routes>\n            <Route exact path=\"/\" element={<Home/>} />\n            <Route exact path=\"/path-finding\" element={<PathfindingVS/>} />\n            <Route exact path=\"/sorting\" element={<SortingApp/>} />\n            <Route exact path=\"/spiral-prime\" element={<PrimeApp/>} />\n          </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}