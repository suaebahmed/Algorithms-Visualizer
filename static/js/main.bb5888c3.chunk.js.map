{"version":3,"sources":["icons/path-finding.png","icons/sort-algo.png","icons/prime-spiral.png","algorithm/path/A_star_algo.js","algorithm/maze/basic-maze.js","algorithm/path/bfs.js","algorithm/path/dfs.js","algorithm/path/dijkstra.js","algorithm/maze/randomized_dfs.js","algorithm/maze/recursive_division.js","components/Navbar.js","Pages/PathfindingVS.js","components/Card.js","components/Footer.js","Pages/Home.js","Pages/BubbleSort.js","algorithm/prime_spiral.js","Pages/PrimeSpiral.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","dx","dy","Astar","Grid","startNode","endNode","N","M","grid","Array","i","arr","j","push","gScore","x","y","path","close_list","open_list","h","Math","abs","f","length","atLeastValueIdx","curr_node","newOpen_list","tmp","tmpX","tmpY","error","isWall","newGScore","newFScore","includes","basicMaze","rows","cols","r","st","Set","c","floor","random","add","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","BFS","visited","visitedNodes","queue","front","shift","DFS","dfs","Dijkstra","distance","priority_queue","cost","sort","a","b","top","vis","goForward","pr","pc","getNeighbors","Randomized_dfs","neighbours","ren_id","pop","recursiveDivision","divide","startRow","endRow","startCol","endCol","mid","ran_id","start","end","Navbar","_ref","msg","react_default","createElement","className","href","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","InitSR","InitSC","InitER","InitEC","animateTime","Spot","Object","classCallCheck","this","isStart","isEnd","Node","_ref4","pv","onMouseDown","onMouseEnter","onMouseUp","setStartEndNode","allowDrop","preventDefault","drop","data","dataTransfer","getData","dom","document","getElementById","id","parseInt","attributes","data_type","target","wall","data_x","data_y","classNode","typeId","draggable","onDragStart","setData","onDrop","onDragOver","toString","waitForAnimatoin","_callee6","time","regenerator_default","wrap","_context6","prev","next","abrupt","Promise","resolve","setTimeout","stop","isValid","App","_useState","useState","_useState2","slicedToArray","setGrid","_useState3","_useState4","isMousePress","setIsMousePress","_useState5","_useState6","mazeID","setMazeID","_useState7","_useState8","pathID","setPathID","_useState9","_useState10","animateType","setAnimateTimeType","useEffect","gridInitialize","animateVisitedNodes","_x","_animateVisitedNodes","apply","arguments","asyncToGenerator","mark","_callee4","node","_context4","concat","animateShortestPath","_x2","_animateShortestPath","_callee5","pathNode","_context5","reverse","pathFinding","_callee","obj","_context","t0","mazeGenerator","_ref2","_callee2","ar","_context2","createWall","_x3","makeAllCellAsAWall","mazeHandle","_ref3","_callee3","_context3","clearPathHandle","row","col","newGrid","toConsumableArray","animationTimeHandle","type","preStartNode","curStartNode","preEndNode","curEndNode","Fragment","components_Navbar","onClick","onChange","disabled","onMouseLeave","map","R","idx_r","key","Value","idx_c","Card","props","_props$array","array","imgURL","text","src","alt","Footer","Home","style","textAlign","react_router_dom","to","components_Card","img1","img2","img3","BARS","barWidth","SPEED","waitForAnimate","_callee8","sp","_context8","SortingApp","bar","setBar","speed","setSpeed","sortID","setSortID","init","ORGINAL_COLOR","COMP_COLOR","SORTED_COLOR","swap","newBars","height","bubbleSort","_bubbleSort","_i6","sorted","background","selectionSort","_selectionSort","_callee7","_i7","leastIdx","_context7","insertionSort","_i","transform","partition","low","high","pivot","_x4","quickSort","pi","sent","_x5","_x6","_x7","mergeSort","newArr1","newArr2","_i2","_i3","k","idx","_x8","_x9","_x10","startSortingHandle","_ref5","_i4","printAllBar","item","width","generateNewArray","backgroundColor","name","htmlFor","event","max","valueAsNumber","min","step","prime_Spiral_Generate","num","list","direction","animation_time","PrimeApp","cntPrime","setCntPrime","gridOfNode","isPrime","startPrimeSpiral","children","react_router","element","Pages_Home","Pages_PathfindingVS","BubbleSort","Pages_PrimeSpiral","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.bb5888c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/path-finding.22453ad4.png\";","module.exports = __webpack_public_path__ + \"static/media/sort-algo.b32220b6.png\";","module.exports = __webpack_public_path__ + \"static/media/prime-spiral.aa4f6636.png\";","/* \r\nTo see my c++ submission:  \r\nhttps://cses.fi/problemset/result/3677359/\r\n\r\nWant to learn more about a* algorithm please visit\r\n\r\nhttps://www.youtube.com/watch?v=icZj67PTFhc&t=256s\r\nhttps://en.wikipedia.org/wiki/A*_search_algorithm\r\n\r\n*/\r\nvar dx = [0,0,+1,-1]\r\nvar dy = [+1,-1,0,0]\r\n\r\nfunction Astar(Grid,startNode,endNode,N,M){\r\n    var grid = new Array(N);\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push({gScore: 1e9, x: -1, y: -1});\r\n        }\r\n        grid[i] = arr;\r\n    }\r\n    let path = [], close_list = [];\r\n    var open_list = [];\r\n    let h = Math.abs(startNode.x-endNode.x)+Math.abs(startNode.y-endNode.y);\r\n    open_list.push({f:h, x: startNode.x, y: startNode.y});\r\n    grid[startNode.x][startNode.y].gScore = 0;\r\n\r\n    while(open_list.length > 0){\r\n        var atLeastValueIdx = 0;\r\n        for(let i=0; i<open_list.length; i++){\r\n            if(open_list[atLeastValueIdx].f > open_list[i].f){\r\n                atLeastValueIdx = i;\r\n            }\r\n        }\r\n        var curr_node = open_list[atLeastValueIdx];\r\n        close_list.push(curr_node);\r\n        // to remove\r\n        var newOpen_list = [];\r\n        for(var i=0; i<open_list.length; i++) if(i!==atLeastValueIdx) newOpen_list.push(open_list[i]);\r\n        open_list = newOpen_list;\r\n\r\n        // // found the path\r\n        if(curr_node.x === endNode.x && curr_node.y === endNode.y){\r\n            // grid[x][y].x = curr_node.x;\r\n            // grid[x][y].y = curr_node.y;\r\n\r\n            var tmp = {x: curr_node.x, y: curr_node.y};\r\n            path.push({x:tmp.x,y:tmp.y});\r\n\r\n            while(grid[tmp.x][tmp.y].x!==-1  || grid[tmp.x][tmp.y].y!==-1){\r\n                let tmpX = grid[tmp.x][tmp.y].x;\r\n                let tmpY = grid[tmp.x][tmp.y].y;\r\n                tmp.x = tmpX;\r\n                tmp.y = tmpY;\r\n                path.push({x:tmp.x,y:tmp.y});\r\n            }\r\n            return {path,close_list,error:\"\"};\r\n        }\r\n\r\n        for(let i=0; i<4; i++){\r\n            let x = dx[i] + curr_node.x;\r\n            let y = dy[i] + curr_node.y;\r\n            if(!(x>=0 && x<N && y>=0 && y<M) || Grid[x][y].isWall) continue;\r\n\r\n            let newGScore  = grid[curr_node.x][curr_node.y].gScore + 1;\r\n            let HScore = Math.abs(x - endNode.x)+Math.abs(y - endNode.y);\r\n            let newFScore = newGScore + HScore;\r\n\r\n            if(grid[x][y].gScore > newGScore){\r\n                grid[x][y].gScore = newGScore;\r\n                grid[x][y].x = curr_node.x;\r\n                grid[x][y].y = curr_node.y;\r\n                if(!open_list.includes({f: newFScore, x, y})) open_list.push({f: newFScore, x, y});\r\n            }\r\n        }\r\n    }\r\n    return {path,close_list,error:\"path is not found\"};\r\n}\r\n\r\n/*\r\nfunction OldAstar(startNode,endNode){\r\n\r\n    var open_list = [];\r\n    var close_list = [];\r\n    let path = [];\r\n\r\n    startNode.g = 0;\r\n    startNode.f = Math.abs(startNode.x-endNode.x)+Math.abs(startNode.y-endNode.y);\r\n    open_list.push(startNode);\r\n\r\n    while(open_list.length > 0){\r\n\r\n        var atLeastValueIdx = 0;\r\n        for(let i=0; i<open_list.length; i++){\r\n            if(open_list[atLeastValueIdx].f > open_list[i].f){\r\n                atLeastValueIdx = i;\r\n            }\r\n        }\r\n        var curr_node = open_list[atLeastValueIdx];\r\n        close_list.push(curr_node);\r\n\r\n        // to remove\r\n        var newOpen_list = [];\r\n        for(var i=0; i<open_list.length; i++) if(i!==atLeastValueIdx) newOpen_list.push(open_list[i]);\r\n        open_list = newOpen_list;\r\n\r\n        // found the path\r\n        if(endNode === curr_node){\r\n            let temp = curr_node;\r\n            path.push(temp);\r\n            while(temp.previous){\r\n                path.push(temp.previous);\r\n                temp = temp.previous;\r\n            }\r\n            return {path,close_list,error:\"\"};\r\n        }\r\n        \r\n        let neighbors = curr_node.neighbors;\r\n        for(let i=0; i<neighbors.length; i++){\r\n            \r\n            var child = neighbors[i];\r\n            if(child.isWall === true) continue;\r\n\r\n            var newGScore  = curr_node.g + 1;\r\n            var HScore = Math.abs(child.x - endNode.x)+Math.abs(child.y - endNode.y);\r\n            child.f = newGScore + HScore;\r\n\r\n            if(neighbors[i].g > newGScore){\r\n                neighbors[i].g = newGScore // update neighbors gScore\r\n                neighbors[i].previous = curr_node;\r\n                if(!open_list.includes(child)) open_list.push(child)\r\n            }\r\n        }\r\n    }\r\n    return {path, close_list, error:\"path is not found\"};\r\n\r\n\r\n}\r\n\r\n*/\r\nexport default Astar;","\r\nfunction basicMaze(rows,cols){\r\n    var arr = [];\r\n    for(var r=0; r<rows; r++){\r\n        const st = new Set()\r\n        for(var j=0; j<cols/4; j++){\r\n            var c = Math.floor((Math.random()*100));\r\n            c %= cols;\r\n            st.add(c);\r\n        }\r\n        for(let c of st) arr.push({r,c});\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default basicMaze;","\r\nvar dx = [0,0,+1,-1]\r\nvar dy = [+1,-1,0,0]\r\n\r\nfunction BFS(Grid,startNode,endNode,N,M){\r\n    var grid = new Array(N);  // newArray - for no reference state-Grid;\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push({x: -1, y: -1, visited: 0});\r\n        }\r\n        grid[i] = arr;\r\n    }\r\n    var visitedNodes = [];\r\n    var path = [];\r\n\r\n    var queue = [];\r\n    queue.push({x : startNode.x, y: startNode.y});\r\n    grid[startNode.x][startNode.y].visited = 1;\r\n    visitedNodes.push({x: startNode.x, y: startNode.y});\r\n\r\n    while(queue.length > 0){\r\n        var front = queue.shift();\r\n\r\n        for(let i=0; i<4; i++){\r\n            var x = dx[i] + front.x;\r\n            var y = dy[i] + front.y;\r\n\r\n            if(x===endNode.x && y===endNode.y){\r\n                visitedNodes.push({x,y});\r\n                grid[x][y].x = front.x;\r\n                grid[x][y].y = front.y;\r\n                var tmp = {x,y};\r\n                path.push({x:tmp.x,y:tmp.y});   //not reference variable\r\n\r\n                while(grid[tmp.x][tmp.y].x!==-1  || grid[tmp.x][tmp.y].y!==-1){\r\n                    let tmpX = grid[tmp.x][tmp.y].x;\r\n                    let tmpY = grid[tmp.x][tmp.y].y;\r\n                    tmp.x = tmpX;\r\n                    tmp.y = tmpY;\r\n                    path.push({x:tmp.x,y:tmp.y});\r\n                }\r\n                return {path,visitedNodes,error:\"\"};\r\n            }\r\n\r\n            // 0 !== false  output: true\r\n            else if(x>=0 && y>=0 && x<N && y<M && !Grid[x][y].isWall && !grid[x][y].visited){\r\n                grid[x][y].visited = 1;\r\n                visitedNodes.push({x,y});\r\n\r\n                grid[x][y].x = front.x;\r\n                grid[x][y].y = front.y;\r\n                queue.push({x,y});\r\n            }\r\n        }\r\n    }\r\n    return {path,visitedNodes,error:\"Path is not found\"};\r\n}\r\n\r\nexport default BFS;","\r\nvar dx = [+1,-1,0,0]\r\nvar dy = [0,0,+1,-1]\r\n\r\nvar grid = [];\r\nvar visitedNodes = [];\r\nvar path = [];\r\n\r\nfunction dfs(r,c,endNode,Grid,N,M){\r\n    grid[r][c].visited = 1;\r\n    visitedNodes.push({x: r, y: c});\r\n\r\n    for(let i=0; i<4; i++){\r\n        let x = r + dx[i];\r\n        let y = c + dy[i];\r\n        if(x===endNode.x && y===endNode.y){\r\n            visitedNodes.push({x,y});\r\n            grid[x][y].x = r;\r\n            grid[x][y].y = c;\r\n            return 1; // if we reach the goal then we immediately back\r\n        }\r\n        else if(x>=0 && y>=0 && x<N && y<M && !Grid[x][y].isWall && !grid[x][y].visited){\r\n            grid[x][y].x = r;\r\n            grid[x][y].y = c;\r\n            if(dfs(x,y,endNode,Grid,N,M)) return 1;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n\r\nfunction DFS(Grid,startNode,endNode,N,M){\r\n    path = []; // make empty for repeated DFS runnig\r\n    visitedNodes = []; \r\n    grid = new Array(N);\r\n\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push({x: -1, y: -1, visited: 0});\r\n        }\r\n        grid[i] = arr;\r\n    }\r\n    dfs(startNode.x,startNode.y,endNode,Grid,N,M);\r\n\r\n    // -------   path  ---------------\r\n    if(grid[endNode.x][endNode.y].x===-1 && grid[endNode.x][endNode.y].y===-1){\r\n        return {path,visitedNodes,error:\"path is not found\"};\r\n    }\r\n    var tmp = {x:endNode.x,y: endNode.y};\r\n    path.push({x:tmp.x,y:tmp.y});\r\n    while(grid[tmp.x][tmp.y].x!==-1  || grid[tmp.x][tmp.y].y!==-1){\r\n        let tmpX = grid[tmp.x][tmp.y].x;\r\n        let tmpY = grid[tmp.x][tmp.y].y;\r\n        tmp.x = tmpX;\r\n        tmp.y = tmpY;\r\n        path.push({x:tmp.x,y:tmp.y});\r\n    }\r\n    return {path,visitedNodes,error:\"\"};\r\n}\r\n\r\nexport default DFS;","var dx = [0,0,+1,-1]\r\nvar dy = [+1,-1,0,0]\r\n\r\nfunction Dijkstra(Grid,startNode,endNode,N,M){\r\n    var visitedNodes = [];\r\n    var path = [];\r\n\r\n    var grid = new Array(N);\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push({distance: 1e9, x : -1, y : -1});\r\n        }\r\n        grid[i] = arr;\r\n    }\r\n    var priority_queue = [];\r\n    priority_queue.push({cost:0, x: startNode.x, y: startNode.y});\r\n    grid[startNode.x][startNode.y].distance = 0;\r\n    visitedNodes.push({x: startNode.x, y: startNode.y});\r\n\r\n    while(priority_queue.length > 0){\r\n        priority_queue.sort((a,b)=>a-b);\r\n        var top = priority_queue.shift();\r\n        if(top.cost !== grid[top.x][top.y].distance) continue;\r\n\r\n        for(let i=0; i<4; i++){\r\n            var x = dx[i] + top.x;\r\n            var y = dy[i] + top.y;\r\n            if(!(x>=0 && x<N && y>=0 && y<M) || Grid[x][y].isWall) continue;\r\n\r\n\r\n            if(x === endNode.x && y === endNode.y){ // path found\r\n                visitedNodes.push({x,y});\r\n                grid[x][y].x = top.x;\r\n                grid[x][y].y = top.y;\r\n                var tmp = {x,y};\r\n                path.push({x:tmp.x,y:tmp.y});\r\n\r\n                while(grid[tmp.x][tmp.y].x!==-1  || grid[tmp.x][tmp.y].y!==-1){\r\n                    let tmpX = grid[tmp.x][tmp.y].x;\r\n                    let tmpY = grid[tmp.x][tmp.y].y;\r\n                    tmp.x = tmpX;\r\n                    tmp.y = tmpY;\r\n                    path.push({x:tmp.x,y:tmp.y});\r\n                }\r\n                return {path,visitedNodes,error:\"\"};\r\n            }\r\n            else if(grid[x][y].distance > 1 + grid[top.x][top.y].distance){\r\n                grid[x][y].distance = 1 + grid[top.x][top.y].distance;\r\n                grid[x][y].x = top.x;\r\n                grid[x][y].y = top.y;\r\n\r\n                visitedNodes.push({x,y});\r\n                priority_queue.push({cost: grid[x][y].distance, x, y});\r\n            }\r\n        }\r\n    }\r\n    return {path,visitedNodes,error:\"path is not found\"};\r\n}\r\n\r\n\r\nexport default Dijkstra;","\r\nvar dx = [+2,-2,0,0]\r\nvar dy = [0,0,+2,-2]\r\n\r\nvar vis = [];\r\nvar visitedNodes = [];\r\n\r\nfunction Randomized_dfs(N,M){\r\n    visitedNodes = [];\r\n    vis = new Array(N);\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push(false);\r\n        }\r\n        vis[i] = arr;\r\n    }\r\n    dfs(1,1,N,M);\r\n    return visitedNodes;\r\n}\r\n// this function is a iterative DFS\r\nfunction dfs(r,c,N,M){\r\n    vis[r][c] = true;\r\n    visitedNodes.push({r,c});\r\n\r\n    var s = [] // stack()\r\n    s.push({x:r,y:c});\r\n    while(s.length > 0){\r\n        let top = s[s.length-1];\r\n\r\n        let neighbours = getNeighbors(top,N,M);\r\n        if(neighbours.length){\r\n            let ren_id = (Math.floor(Math.random()*10))%neighbours.length;\r\n            goForward(top.x,top.y,neighbours[ren_id][0],neighbours[ren_id][1]);\r\n            s.push({x:neighbours[ren_id][0], y: neighbours[ren_id][1]});\r\n            vis[neighbours[ren_id][0]][neighbours[ren_id][1]] = true;\r\n        }\r\n        else s.pop();\r\n    }\r\n} \r\n\r\nfunction goForward(pr,pc,r,c){\r\n    if(r===pr){\r\n        if(c < pc) for(let i=pc-1; i>=c; i--)visitedNodes.push({r,c:i});\r\n        else for(let i=pc+1; i<=c; i++) visitedNodes.push({r,c:i});\r\n                \r\n    }\r\n    else{\r\n        if(r < pr) for(let i=pr-1; i>=r; i--) visitedNodes.push({r:i,c});\r\n        else for(let i=pr+1; i<=r; i++)visitedNodes.push({r:i,c});\r\n    }\r\n}\r\n\r\nfunction getNeighbors(top,N,M){\r\n    let arr = [];\r\n    for(let i=0; i<4; i++){\r\n        let x = top.x + dx[i];\r\n        let y = top.y + dy[i];\r\n        if(x>=0 && y>=0 && x<N && y<M && !vis[x][y]){\r\n            arr.push([x,y]);\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default Randomized_dfs;\r\n","var vis = [];\r\nvar visitedNodes = [];\r\n\r\nfunction recursiveDivision(N,M){\r\n    visitedNodes = [];\r\n    vis = new Array(N);\r\n    for(let i=0; i<N; i++){\r\n        let arr = [];\r\n        for(let j=0; j<M; j++){\r\n            arr.push(false);\r\n        }\r\n        vis[i] = arr;\r\n    }\r\n    //All around of the grid..\r\n    for(let i=0; i<M; i++){\r\n        visitedNodes.push({r:0,c:i});\r\n        vis[0][i] = true;\r\n    }\r\n    for(let i=1; i<N; i++){\r\n        visitedNodes.push({r:i,c:M-1});\r\n        vis[i][M-1] = true;\r\n    }\r\n    for(let i=M-2; i>=0; i--){\r\n        visitedNodes.push({r:N-1,c:i});\r\n        vis[N-1][i] = true;\r\n    }\r\n    for(let i=N-2; i>0; i--){\r\n        visitedNodes.push({r:i,c:0});\r\n        vis[i][0] = true;\r\n    }\r\n\r\n    divide(1,N-2,1,M-2);\r\n    return visitedNodes;\r\n}\r\n\r\nfunction divide(startRow,endRow,startCol,endCol){\r\n    if(endRow-startRow<=1 && endCol-startCol<=1) return;\r\n    if(endRow-startRow > endCol-startCol){\r\n        let mid = Math.floor((startRow+endRow)/2);\r\n        let ran_id = Math.floor((Math.random()*100)%(endCol-startCol+1))+startCol;\r\n\r\n        let start = startCol;\r\n        if(vis[mid][startCol-1]===false){\r\n            ran_id = start;\r\n            start++;\r\n        }\r\n        let end = endCol;\r\n        if(vis[mid][endCol+1]===false){\r\n            ran_id = end;\r\n            end--;\r\n        }\r\n        for(let i=start; i<=end; i++){\r\n            if(i !== ran_id){\r\n                visitedNodes.push({r:mid,c:i});\r\n                vis[mid][i] = true;\r\n            }\r\n        }\r\n        divide(startRow,mid-1,startCol,endCol);\r\n        divide(mid+1,endRow,startCol,endCol);\r\n    }\r\n    else{\r\n        let mid = Math.floor((startCol+endCol)/2);\r\n        let ran_id = Math.floor((Math.random()*100)%(endRow-startRow+1))+startRow;\r\n\r\n        let start = startRow;\r\n        if(vis[startRow-1][mid]===false){\r\n            ran_id = start;\r\n            start++;\r\n        }\r\n        let end = endRow;\r\n        if(vis[end+1][mid]===false){\r\n            ran_id = end;\r\n            end--;\r\n        }\r\n        for(let i=start; i<=end; i++){\r\n            if(i !== ran_id){\r\n                visitedNodes.push({r:i,c:mid});\r\n                vis[i][mid] = true;\r\n            }\r\n        }\r\n        divide(startRow,endRow,startCol,mid-1);\r\n        divide(startRow,endRow,mid+1,endCol);\r\n    }\r\n}\r\n\r\nexport default recursiveDivision;","import React from 'react'\r\nimport '../styles/navbar.css';\r\n\r\nfunction Navbar({msg}) {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div>\r\n        <a className='navbarlink' href='/'>\r\n          Home\r\n        </a>\r\n      </div>\r\n      <div className=\"nav-title\">\r\n        <div className=\"nav-title-hd\">{msg}</div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\nexport default Navbar;","import React,{useEffect, useState} from 'react'\r\nimport '../styles/PathfindingVS.css';\r\nimport Astar from '../algorithm/path/A_star_algo';\r\nimport basicMaze from '../algorithm/maze/basic-maze';\r\nimport BFS from '../algorithm/path/bfs';\r\nimport DFS from '../algorithm/path/dfs';\r\nimport Dijkstra from '../algorithm/path/dijkstra';\r\nimport Randomized_dfs from '../algorithm/maze/randomized_dfs';\r\nimport recursiveDivision from '../algorithm/maze/recursive_division';\r\nimport Navbar from '../components/Navbar';\r\n\r\n/*\r\nsuper(props);// call the super class constructor and pass in the props parameter\r\n*/\r\n\r\nvar rows = 17;\r\nvar cols = 31;\r\n\r\nvar START_NODE_ROW = 4, START_NODE_COL = 6;\r\nvar END_NODE_ROW = rows-6, END_NODE_COL = cols-6;\r\nvar InitSR = START_NODE_ROW, InitSC = START_NODE_COL;\r\nvar InitER = END_NODE_ROW, InitEC = END_NODE_COL;\r\n\r\nvar animateTime = 35; // 8,35,80\r\n\r\nfunction App(){\r\n    const [Grid,setGrid] = useState([]);  // array destructuring\r\n    const [isMousePress,setIsMousePress] = useState(false);\r\n    const [mazeID,setMazeID] = useState(0);\r\n    const [pathID,setPathID] = useState(0);\r\n    const [animateType,setAnimateTimeType] = useState(2);\r\n\r\n\r\n    useEffect(()=>{\r\n        gridInitialize();\r\n    },[])\r\n\r\n    const gridInitialize =()=>{\r\n        var grid = new Array(rows);\r\n        for(let i=0; i<rows; i++) grid[i] = new Array(cols);\r\n\r\n        for(let i=0; i<rows; i++){\r\n            for(let j=0; j<cols; j++){\r\n                grid[i][j] = new Spot(i,j);\r\n            }\r\n        }\r\n        /* -- add neighbors of each node ---\r\n        for(let i=0; i<rows; i++){\r\n            for(let j=0; j<cols; j++){\r\n                grid[i][j].getNeighbors(grid);\r\n            }\r\n        } */\r\n        setGrid(grid);\r\n    }\r\n    // animate the algorithm\r\n    async function animateVisitedNodes(visitedNodes){\r\n        for(let i=0; i<visitedNodes.length; i++){\r\n            const node = visitedNodes[i];\r\n            await waitForAnimatoin(animateTime);\r\n            if(node.x === START_NODE_ROW && node.y === START_NODE_COL)\r\n            document.getElementById(`row${node.x}_col${node.y}`).className = \"node-visited START_NODE\";\r\n\r\n            else if(node.x === END_NODE_ROW && node.y === END_NODE_COL)\r\n            document.getElementById(`row${node.x}_col${node.y}`).className = \"node-visited END_NODE\";\r\n\r\n            else document.getElementById(`row${node.x}_col${node.y}`).className = \"node-visited\";\r\n        }\r\n    }\r\n    async function animateShortestPath(pathNode){\r\n        pathNode.reverse();\r\n        for(let i=0; i<pathNode.length; i++){\r\n            const node = pathNode[i];\r\n            await waitForAnimatoin(animateTime);\r\n            if(i===0) \r\n            document.getElementById(`row${node.x}_col${node.y}`).className = \"shortestPath START_NODE\";\r\n            else if(i+1 === pathNode.length) \r\n            document.getElementById(`row${node.x}_col${node.y}`).className = \"shortestPath END_NODE\";\r\n            else document.getElementById(`row${node.x}_col${node.y}`).className = \"shortestPath\";\r\n        }\r\n    }\r\n\r\n    const pathFinding = async () =>{\r\n        var startNode = Grid[START_NODE_ROW][START_NODE_COL];\r\n        var endNode = Grid[END_NODE_ROW][END_NODE_COL];\r\n\r\n        switch(pathID){\r\n            case 1:\r\n                var obj = BFS(Grid,startNode,endNode,rows,cols);\r\n                await animateVisitedNodes(obj.visitedNodes);\r\n                animateShortestPath(obj.path);\r\n            break;\r\n            case 2:\r\n                obj = DFS(Grid,startNode,endNode,rows,cols);\r\n                await animateVisitedNodes(obj.visitedNodes);\r\n                animateShortestPath(obj.path);\r\n            break;\r\n            case 3:\r\n                obj = Dijkstra(Grid,startNode,endNode,rows,cols);\r\n                await animateVisitedNodes(obj.visitedNodes);\r\n                animateShortestPath(obj.path);\r\n            break;\r\n            default:\r\n                obj = Astar(Grid,startNode,endNode,rows,cols);\r\n                await animateVisitedNodes(obj.close_list);\r\n                animateShortestPath(obj.path);\r\n            break;\r\n        }\r\n    }\r\n\r\n    const mazeGenerator = async (ar) =>{\r\n        for(var i=0; i<ar.length; i++){\r\n            if((ar[i].r===START_NODE_ROW && ar[i].c===START_NODE_COL) || \r\n            (ar[i].r===END_NODE_ROW && ar[i].c===END_NODE_COL)) continue;\r\n                await waitForAnimatoin(animateTime);\r\n                createWall(ar[i].r,ar[i].c);\r\n        }\r\n    }\r\n    const makeAllCellAsAWall = () =>{\r\n        for(let i=0; i<rows; i++){\r\n            for(let j=0; j<cols; j++){\r\n                if(!((i===START_NODE_ROW && j===START_NODE_COL) || (i===END_NODE_ROW && j===END_NODE_COL))){\r\n                    createWall(i,j);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    const mazeHandle = async () =>{        \r\n        var arr = [];\r\n        switch(mazeID){\r\n            case 1:\r\n                arr = basicMaze(rows,cols);\r\n                mazeGenerator(arr);\r\n            break;\r\n            case 2:\r\n                makeAllCellAsAWall();\r\n                arr = Randomized_dfs(rows,cols);\r\n                mazeGenerator(arr);\r\n            break;\r\n            case 3: // recursive division\r\n                arr = recursiveDivision(rows,cols);\r\n                mazeGenerator(arr);\r\n            break;\r\n            default:\r\n        }\r\n    }\r\n    const clearPathHandle = () =>{\r\n        for(let i=0; i<rows; i++){\r\n            for(let j=0; j<cols; j++){\r\n                if(i===START_NODE_ROW && j===START_NODE_COL){\r\n                    document.getElementById(`row${i}_col${j}`).className = \"square START_NODE\";\r\n                }\r\n                else if(i===END_NODE_ROW && j===END_NODE_COL){\r\n                    document.getElementById(`row${i}_col${j}`).className = \"square END_NODE\";\r\n                }\r\n                else if(!Grid[i][j].isWall)\r\n                document.getElementById(`row${i}_col${j}`).className = \"square\";\r\n            }\r\n        }\r\n    }\r\n\r\n    const createWall=(row,col)=>{\r\n        /*\r\n            ********* the concept should be known array reference and copy *****\r\n        */\r\n        var newGrid = [...Grid] // array copy\r\n        var node = newGrid[row][col];\r\n        node.isWall = !node.isWall;\r\n        newGrid[row][col] = node;\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const onMouseDown = (row,col)=>{\r\n        if(isValid(row,col)){\r\n            setIsMousePress(true);\r\n            createWall(row,col);\r\n        }\r\n    }\r\n    const onMouseEnter = (row,col)=>{\r\n        if(isMousePress === true && isValid(row,col)){\r\n            createWall(row,col);\r\n        }\r\n    }\r\n    const onMouseUp = ()=>{\r\n        setIsMousePress(()=>false);\r\n    }\r\n    const animationTimeHandle = (type) =>{\r\n        if(type === 1) animateTime = 8;\r\n        else if(type === 2) animateTime = 35;\r\n        else animateTime = 80;\r\n        setAnimateTimeType(type);\r\n    }\r\n\r\n    const setStartEndNode = (id, r, c) =>{\r\n        if(id === 1){\r\n            let newGrid = [...Grid] // array copy\r\n            let preStartNode = newGrid[START_NODE_ROW][START_NODE_COL];\r\n            let curStartNode = newGrid[r][c];\r\n            preStartNode.isStart = !preStartNode.isStart;\r\n            curStartNode.isStart = !curStartNode.isStart;\r\n            setGrid(newGrid);\r\n\r\n            START_NODE_ROW = r;\r\n            START_NODE_COL = c;\r\n        }\r\n        else{\r\n            let newGrid = [...Grid] // array copy\r\n            let preEndNode = newGrid[END_NODE_ROW][END_NODE_COL];\r\n            let curEndNode = newGrid[r][c];\r\n            preEndNode.isEnd = !preEndNode.isEnd;\r\n            curEndNode.isEnd = !curEndNode.isEnd;\r\n            setGrid(newGrid);\r\n\r\n            END_NODE_ROW = r;\r\n            END_NODE_COL = c;\r\n        } \r\n    }\r\n\r\n    return (\r\n        <>\r\n        <Navbar msg='Path Finder Visualizer'></Navbar>\r\n        <div className='path-container'>\r\n\r\n            <div className='path-header'>\r\n                <div className='path-top-btns'>\r\n                    <div>\r\n                        <button className='button-4 start-btn' onClick={pathFinding}>Find the shortest path</button>\r\n                        <select className='my-drop-down' value={pathID} onChange={(e)=>{setPathID(parseInt(e.target.value))}}>\r\n                            <option value=\"0\">A-Star Search</option>\r\n                            <option value=\"1\">Breadth-First Search</option>\r\n                            <option value=\"2\">Depth-First Search</option>\r\n                            <option value=\"3\">Dijkstra</option>\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <select className='my-drop-down' value={mazeID} onChange={(e)=>{setMazeID(parseInt(e.target.value))}}>\r\n                            <option className='my-drop-down-option' disabled value=\"0\">Select Maze</option>\r\n                            <option value=\"1\">Random basic maze</option>\r\n                            <option value=\"2\">Randomized_dfs</option>\r\n                            <option value=\"3\">Recursive division</option>\r\n                            <option disabled value=\"4\">Kruskal's algorithm</option>\r\n                            <option disabled value=\"5\">Prim's algorithm</option>\r\n                        </select>\r\n                        <button className='button-4 start-maze-btn' onClick={mazeHandle}>Create Maze</button>\r\n                        <button className='button-4' onClick={gridInitialize}>Clear walls</button>\r\n                        <button className='button-4' onClick={clearPathHandle}>Clear path</button>\r\n                        <button className='button-4' onClick={()=>{\r\n                            START_NODE_ROW = InitSR;\r\n                            START_NODE_ROW = InitSC;\r\n                            END_NODE_ROW = InitER;\r\n                            END_NODE_COL = InitEC;\r\n                            clearPathHandle();\r\n                            gridInitialize();\r\n                        }}>\r\n                            Reset board\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className='path-bottom-btns'>\r\n                    <button className={`button-4 ${animateType===1 && 'curr-speed-btn'}`} onClick={()=>animationTimeHandle(1)}>Fast</button>\r\n                    <button className={`button-4 ${animateType===2 && 'curr-speed-btn'}`} onClick={()=>animationTimeHandle(2)}>Average</button>\r\n                    <button className={`button-4 ${animateType===3 && 'curr-speed-btn'}`} onClick={()=>animationTimeHandle(3)}>Slow</button>\r\n                </div>\r\n            </div>\r\n            <div className='grid'>\r\n                <div onMouseLeave={()=>{setIsMousePress(false)}}>\r\n                {/* JSX Node Of Grid (2D Array) */}\r\n                {Grid.map((R,idx_r)=>{\r\n                return (<div key={idx_r} className='ROW'>\r\n                            {R.map((Value,idx_c)=>{\r\n                                    const {x,y,isStart,isEnd,isWall} = Value;\r\n                                    return <Node key={idx_c} \r\n                                    pv={{x,y,isStart,isEnd,isWall,onMouseDown,onMouseEnter,onMouseUp,setStartEndNode}}>\r\n                                    </Node>\r\n                                })\r\n                            }\r\n                        </div>)\r\n                })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nclass Spot {\r\n    constructor(i, j) {\r\n        this.x = i;\r\n        this.y = j;\r\n        this.isWall = false;\r\n        this.isStart = (i===START_NODE_ROW && j===START_NODE_COL);\r\n        this.isEnd = (i===END_NODE_ROW && j===END_NODE_COL);\r\n        \r\n        /*\r\n        ----  below information we don't use after 16 number of commits in github ---\r\n        this.f = 1e9;\r\n        this.g = 1e9;\r\n        this.previous = undefined;\r\n        this.neighbors = [];\r\n        this.getNeighbors = function(grid){\r\n            if(i > 0) this.neighbors.push(grid[i-1][j]); // up\r\n            if(j > 0) this.neighbors.push(grid[i][j-1]); // left\r\n\r\n            if(i+1<rows) this.neighbors.push(grid[i+1][j]); // down\r\n            if(j+1<cols) this.neighbors.push(grid[i][j+1]); // right\r\n        }\r\n        */\r\n    }\r\n}\r\n\r\nfunction Node({pv}){\r\n    const {x,y,isStart,isEnd,isWall,onMouseDown,onMouseEnter,onMouseUp,setStartEndNode} = pv;\r\n    const allowDrop=(e)=>{e.preventDefault();}\r\n    const drag=(e)=>{e.dataTransfer.setData(\"myID\", e.target.id);}\r\n    const drop=(e)=>{\r\n        e.preventDefault();\r\n        var data = e.dataTransfer.getData(\"myID\");\r\n        var dom = document.getElementById(data);\r\n        var id = parseInt(dom.attributes.data_type.value);\r\n        if(e.target.attributes.data_type.value !== \"3\" || e.target.attributes.wall.value === \"true\") return;\r\n        \r\n        // call the function\r\n        var r = parseInt(e.target.attributes.data_x.value)\r\n        var c = parseInt(e.target.attributes.data_y.value)\r\n        setStartEndNode(id,r,c);\r\n    }\r\n\r\n    var classNode = isStart?\"START_NODE\":(isEnd?\"END_NODE\":(isWall?\"obtacle\":\"\"));\r\n    var typeId = isStart?\"1\":(isEnd?\"2\":\"3\");\r\n\r\n    if(isStart || isEnd){\r\n        return (\r\n            <div \r\n            className={'square '+classNode} id={'row'+x+'_col'+y}\r\n            data_x={x} \r\n            data_y={y} \r\n            data_type={typeId} \r\n            wall=\"false\"\r\n            draggable=\"true\"\r\n            onDragStart={drag} \r\n            onDrop={drop} \r\n            onDragOver={allowDrop}\r\n            >\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <div onMouseDown={(e)=>{\r\n                e.preventDefault(); // it is necessary\r\n                onMouseDown(x,y)}\r\n            } \r\n            onMouseEnter={(e)=>{\r\n                e.preventDefault();\r\n                onMouseEnter(x,y)}\r\n            } \r\n            onMouseUp={(e)=>{\r\n                e.preventDefault();\r\n                onMouseUp()}\r\n            } \r\n            className={'square '+classNode} id={'row'+x+'_col'+y}\r\n            data_x={x} \r\n            data_y={y} \r\n            data_type={typeId} \r\n            wall={isWall.toString()}\r\n            onDrop={drop} \r\n            onDragOver={allowDrop}\r\n            >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nasync function waitForAnimatoin(time){\r\n    return new Promise((resolve)=>{\r\n        setTimeout(()=>{\r\n            resolve('');\r\n        },time)\r\n    })\r\n}\r\nconst isValid = (r,c) =>{\r\n    if((r===START_NODE_ROW && c===START_NODE_COL) || (r===END_NODE_ROW && c===END_NODE_COL)) return 0;\r\n    else return 1;\r\n}\r\nexport default App;","import React from 'react';\r\nimport '../styles/card.css';\r\n\r\nfunction Card(props) {\r\n  const [imgURL,text] = props.array;\r\n  return (\r\n    <div className='card-body'>\r\n      <div>\r\n        <img className='card-img' src={imgURL} alt=\"\"></img>\r\n      </div>\r\n      <div className='card-bottom'>\r\n        <p>{text}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport '../styles/footer.css'\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <div className='footer'>\r\n        <span>Footer</span>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport Card from '../components/Card';\r\nimport Footer from '../components/Footer';\r\nimport Navbar from '../components/Navbar'\r\nimport '../styles/home.css';\r\nimport img1 from '../icons/path-finding.png';\r\nimport img2 from '../icons/sort-algo.png';\r\nimport img3 from '../icons/prime-spiral.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"container\">\r\n      <Navbar msg={'Wellcome To Our Algorithm Visualizer'}></Navbar>\r\n      <h1 style={{\"textAlign\": \"center\"}}>Here, I implemented these Algorithmic Projects</h1>\r\n\r\n      <div className='cards-container'>\r\n        <Link className='no_underline' to=\"/path-finding\">\r\n          <Card array={[img1,\"Path-Finder\"]}/>\r\n        </Link>\r\n        <Link className='no_underline' to=\"/sorting\">\r\n          <Card array={[img2,\"Sorting Algorithms\"]}/>\r\n        </Link>\r\n        <Link className='no_underline' to=\"/spiral-prime\">\r\n          <Card array={[img3,\"Spiral Primes\"]}/>\r\n        </Link>\r\n      </div>\r\n\r\n      {/* Footer only has for Home */}\r\n      <Footer></Footer> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home;","import React, { useEffect, useState } from 'react';\r\nimport '../styles/Bubble.css';\r\nimport Navbar from '../components/Navbar';\r\n\r\nvar BARS = 50;\r\nconst barWidth = 20;\r\nvar SPEED = 500;\r\n\r\nasync function waitForAnimate(sp){\r\n    sp = sp < 5? 5 : sp;\r\n    return new Promise((resolve)=>{\r\n        setTimeout(()=>{resolve('')},sp);\r\n    })\r\n}\r\n\r\n/*\r\n    ** https://blog.logrocket.com/why-react-doesnt-update-state-immediately/\r\n\r\n    // speed variable doesn't work but work for global variable\r\n    // it's need for input range dom update\r\n*/\r\n\r\nfunction SortingApp(){\r\n    const [bar,setBar] = useState([80,40,20,70,30]);\r\n    var [speed,setSpeed] = useState(SPEED); \r\n    const [sortID,setSortID] = useState(3);\r\n\r\n    useEffect(()=>{\r\n       init(); \r\n    },[])\r\n\r\n    const init=()=>{\r\n        var arr = [];\r\n        for(let i=0; i<BARS; i++){\r\n            let x = Math.floor(Math.random()*1000)%400;\r\n            arr.push(x);\r\n        }\r\n        setBar(arr);\r\n    }\r\n    var ORGINAL_COLOR = '#3498DB';\r\n    var COMP_COLOR = '#FF5959';\r\n    var SORTED_COLOR = '#6C3483';\r\n    var PIVOT_COLOR = 'orange';\r\n\r\n    const swap = (i,j,newBars) => {\r\n        document.getElementById('bar-'+i).style.height = newBars[j]+'px';\r\n        document.getElementById('bar-'+j).style.height = newBars[i]+'px';\r\n\r\n        var tmp = newBars[i];\r\n        newBars[i] = newBars[j];\r\n        newBars[j] = tmp;\r\n    }\r\n    // -----------  All Sorting Algorithm  -----------\r\n    async function bubbleSort(){\r\n        var newBars = []; //copy the array\r\n        for(let i=0; i<bar.length; i++) newBars.push(bar[i]);\r\n\r\n        for(var i=0; i<newBars.length; i++){\r\n            for(var j=0; j<newBars.length-1-i; j++){\r\n                \r\n                document.getElementById('bar-'+j).style.background =  COMP_COLOR;\r\n                document.getElementById('bar-'+(j+1)).style.background = COMP_COLOR;\r\n                // we control animation speed with async/await and Promise.\r\n                await waitForAnimate(SPEED); // global var\r\n                document.getElementById('bar-'+j).style.background = ORGINAL_COLOR\r\n                document.getElementById('bar-'+(j+1)).style.background = ORGINAL_COLOR;\r\n\r\n\r\n                if(newBars[j] > newBars[j+1]){\r\n                    swap(j,j+1,newBars);\r\n                }\r\n            }\r\n            var sorted = newBars.length-1-i;\r\n            document.getElementById('bar-'+sorted).style.background = SORTED_COLOR;\r\n        }\r\n    }\r\n    async function selectionSort(){\r\n        var newBars = [];\r\n        for(let i=0; i<bar.length; i++) newBars.push(bar[i]);\r\n        \r\n        for(var i=0; i<newBars.length; i++){\r\n            var leastIdx = i;\r\n            document.getElementById('bar-'+leastIdx).style.background = 'black';\r\n\r\n            for(var j=i+1; j<newBars.length; j++){\r\n                document.getElementById('bar-'+j).style.background = COMP_COLOR;\r\n                await waitForAnimate(SPEED); // global var\r\n                document.getElementById('bar-'+j).style.background = ORGINAL_COLOR;\r\n\r\n                if(newBars[j] < newBars[leastIdx]){\r\n                    document.getElementById('bar-'+leastIdx).style.background = ORGINAL_COLOR;\r\n                    leastIdx = j;\r\n                    document.getElementById('bar-'+leastIdx).style.background = 'black';\r\n                }\r\n            }\r\n            // swap\r\n            swap(i,leastIdx,newBars);\r\n            document.getElementById('bar-'+leastIdx).style.background = ORGINAL_COLOR;\r\n            document.getElementById('bar-'+i).style.background = SORTED_COLOR\r\n        }\r\n    }\r\n    const insertionSort = async () =>{\r\n        var newBars = [];\r\n        for(let i=0; i<bar.length; i++) newBars.push(bar[i]);\r\n        \r\n        for(var i=1; i<newBars.length; i++){\r\n            var tmp = newBars[i], j = i-1;\r\n            document.getElementById('bar-'+i).style.transform = 'translateY(15px)'\r\n\r\n            while(j>=0 && newBars[j] > tmp){\r\n                document.getElementById('bar-'+j).style.background = COMP_COLOR;\r\n                document.getElementById('bar-'+(j+1)).style.background = PIVOT_COLOR;\r\n\r\n                await waitForAnimate(SPEED);\r\n                newBars[j+1] = newBars[j];\r\n                document.getElementById('bar-'+(j+1)).style.height = newBars[j]+'px';\r\n                document.getElementById('bar-'+(j+1)).style.background = SORTED_COLOR;\r\n                j--;\r\n            }\r\n            newBars[j+1] = tmp;\r\n            document.getElementById('bar-'+(j+1)).style.height = tmp+'px';\r\n            document.getElementById('bar-'+(j+1)).style.background = SORTED_COLOR;\r\n            document.getElementById('bar-'+i).style.transform = 'translateY(0px)';\r\n        }\r\n    }\r\n    const partition = async (low,high,array) =>{\r\n        let pivot = high, i = low;\r\n        document.getElementById('bar-'+pivot).style.background = PIVOT_COLOR;\r\n\r\n        for(let j=low; j<high; j++){\r\n            document.getElementById('bar-'+j).style.background = COMP_COLOR;\r\n            document.getElementById('bar-'+i).style.background = COMP_COLOR;\r\n            await waitForAnimate(SPEED);\r\n            document.getElementById('bar-'+j).style.background = ORGINAL_COLOR;\r\n            document.getElementById('bar-'+i).style.background = ORGINAL_COLOR;\r\n\r\n            if(array[j] <= array[pivot]){\r\n                swap(i,j,array);\r\n                i++;\r\n            }\r\n        }\r\n        swap(i,pivot,array);\r\n        document.getElementById('bar-'+pivot).style.background = ORGINAL_COLOR;\r\n        return i;\r\n    }\r\n\r\n    const quickSort = async (low,high,array) =>{\r\n        if(low >= high) return;\r\n        let pi = await partition(low,high,array);\r\n        await quickSort(low,pi-1,array);\r\n        await quickSort(pi+1,high,array);            \r\n    }\r\n\r\n    const mergeSort = async (low,high,array) =>{\r\n        if(low >= high) return;\r\n        var mid = Math.floor((low+high)/2);\r\n        await mergeSort(low,mid,array)\r\n        await mergeSort(mid+1,high,array);\r\n\r\n        // merge the array\r\n        // console.log(low,high, mid);\r\n\r\n        var newArr1 = [], newArr2 = [];\r\n        for(let i=low; i<=mid; i++){\r\n            newArr1.push({x:array[i],idx:i});\r\n        }\r\n        for(let i=mid+1; i<=high; i++){\r\n            newArr2.push({x:array[i],idx:i});\r\n        }\r\n        let i=0, j = 0, k = low;\r\n        while(i<newArr1.length && j<newArr2.length){\r\n            document.getElementById('bar-'+newArr1[i].idx).style.background = COMP_COLOR;\r\n            document.getElementById('bar-'+newArr2[j].idx).style.background = COMP_COLOR;\r\n            await waitForAnimate(SPEED);\r\n            document.getElementById('bar-'+newArr1[i].idx).style.background = SORTED_COLOR;\r\n            document.getElementById('bar-'+newArr2[j].idx).style.background = SORTED_COLOR;\r\n\r\n            if(newArr1[i].x < newArr2[j].x){\r\n                array[k] = newArr1[i].x;\r\n                document.getElementById('bar-'+k).style.height = array[k]+'px';\r\n                i++;\r\n            }\r\n            else{\r\n                array[k] = newArr2[j].x;\r\n                document.getElementById('bar-'+k).style.height = array[k]+'px';\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n        while(i<newArr1.length){\r\n            array[k] = newArr1[i].x;\r\n            document.getElementById('bar-'+k).style.height = array[k]+'px';\r\n            document.getElementById('bar-'+k).style.background = SORTED_COLOR;\r\n            i++;\r\n            k++;\r\n        }\r\n        while(j<newArr2.length){\r\n            array[k] = newArr2[j].x;\r\n            document.getElementById('bar-'+k).style.height = array[k]+'px';\r\n            document.getElementById('bar-'+k).style.background = SORTED_COLOR;\r\n            j++;\r\n            k++;\r\n        }\r\n    }\r\n    // -----------  End Sorting Algorithm  ----------\r\n\r\n    const startSortingHandle = async () =>{\r\n        var newBars = [];\r\n        switch(sortID){\r\n            case 1:\r\n                selectionSort();\r\n            break;\r\n            case 2:\r\n                insertionSort();\r\n            break;\r\n            case 3:\r\n                for(let i=0; i<bar.length; i++) newBars.push(bar[i]); \r\n                await quickSort(0,newBars.length-1,newBars);\r\n            break;\r\n            case 4:\r\n                newBars = [];\r\n                for(let i=0; i<bar.length; i++) newBars.push(bar[i]); \r\n                await mergeSort(0,newBars.length-1,newBars);\r\n            break;\r\n            default:\r\n                bubbleSort();\r\n            break;\r\n        }\r\n    }\r\n\r\n    const printAllBar = (\r\n            bar.map((item,id)=>{\r\n                return(\r\n                    <div className='bar' id={'bar-'+id} key={id} \r\n                    style={{width:barWidth,height:item}}>\r\n                    </div>\r\n                )\r\n            })\r\n    )\r\n    const rangeValueHandle = (event) =>{    \r\n        SPEED = parseInt(event.target.max)-parseInt(event.target.value);\r\n        setSpeed(event.target.valueAsNumber);\r\n    }\r\n    const sizeHandle = (e) =>{\r\n        BARS = parseInt(e.target.value);\r\n        generateNewArray();\r\n    }\r\n    const generateNewArray = () =>{\r\n        var arr = [];\r\n        for(let i=0; i<BARS; i++){\r\n            let x = Math.floor(Math.random()*1000)%400;\r\n            arr.push(x);\r\n        }\r\n        for(let i=0; i<bar.length; i++){\r\n            var dom = document.getElementById('bar-'+i);\r\n            dom.style.backgroundColor = '#3498DB';\r\n        }\r\n        setBar(arr);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navbar msg='Sorting Algorithms'></Navbar>\r\n            <div className='sorting-continer'>\r\n                <div className='Btn-Wrap'>\r\n                    <div>\r\n                        <button className='button-4 start-btn' onClick={startSortingHandle}>Start Sorting</button>\r\n                        <button className='button-4' onClick={generateNewArray}>Generate New</button>\r\n                        <select className='my-drop-down' value={sortID} onChange={(e)=>{setSortID(parseInt(e.target.value));generateNewArray()}} id=\"num\" name=\"num\">\r\n                                <option value=\"0\">Bubble Sort</option>\r\n                                <option value=\"1\">Selection Sort</option>\r\n                                <option value=\"2\">Insertion Sort</option>\r\n                                <option value=\"3\">Quick Sort</option>\r\n                                <option value=\"4\">Merge Sort</option>\r\n                        </select>\r\n                    </div>\r\n                    <div className='st-speed-range'>\r\n                        <div className='st-speed-range-lavel'>\r\n                            <label className='sorting-label' htmlFor='range1'>Speed: </label>\r\n                        </div>\r\n                        <div>\r\n                            <input type='range' onChange={rangeValueHandle} name='range1' id = 'range1'\r\n                            min='1' value={speed} max='1000' step='1'></input>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor='num'>Choose Size: </label>\r\n                        <select className='my-drop-down' value={bar.length} onChange={sizeHandle} id=\"num\" name=\"num\">\r\n                            <option value=\"10\">10</option>\r\n                            <option value=\"25\">25</option>\r\n                            <option value=\"50\">50</option>\r\n                            <option value=\"100\">100</option>\r\n                            <option value=\"200\">200</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className='wrapperBar'>\r\n                {printAllBar}\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SortingApp;","\r\nfunction prime_Spiral_Generate(N){\r\n\r\n    var row = Math.floor(N/2);\r\n    var col = Math.floor(N/2);\r\n    var num = 1, step = 1;\r\n    var list = [];\r\n\r\n    for(let k = 0; k<Math.floor(N/2); k++){\r\n        for(let i=0; i<step; i++){\r\n            list.push({r: row,c: col++, num: num++, direction: 1});\r\n        }\r\n        for(let j=0; j<step; j++){\r\n            list.push({r: row--,c: col, num: num++, direction: 2});\r\n        }\r\n        step++;\r\n        for(let i=0; i<step; i++){\r\n            list.push({r: row,c: col--, num: num++, direction: 3});\r\n\r\n        }\r\n        for(let j=0; j<step; j++){\r\n            list.push({r: row++,c: col, num: num++, direction: 4});\r\n        }\r\n        step++;\r\n    }\r\n    for(let i=1; i<step; i++){\r\n        list.push({r: row,c: col++, num: num++, direction: 1});\r\n    }\r\n    return list;\r\n}\r\n\r\nexport default prime_Spiral_Generate;","import React, { useState, useEffect } from 'react'\r\nimport '../styles/PrimeSpiral.css'\r\nimport prime_Spiral_Generate from '../algorithm/prime_spiral';\r\nimport Navbar from '../components/Navbar';\r\n\r\n// Density of primes = n/ln(n);\r\nconst N = 21;\r\n\r\nfunction PrimeApp(){\r\n    const[Grid,setGrid] = useState([]);\r\n    const[cntPrime, setCntPrime] = useState(0);\r\n\r\n    useEffect(()=>{\r\n        gridInitialize();\r\n    },[])\r\n\r\n    const gridInitialize =()=>{\r\n        var grid = new Array(N);\r\n        for(let i=0; i<N; i++) grid[i] = new Array(N);\r\n        let c = 0;\r\n        for(let i=0; i<N; i++){\r\n            for(let j=0; j<N; j++){\r\n                grid[i][j] = ++c;\r\n            }\r\n        }\r\n        setGrid(grid);\r\n    }\r\n\r\n    const gridOfNode = (\r\n        Grid.map((R,idx_r)=>{\r\n            return (\r\n                <div key={idx_r} className='ROW'>\r\n                    {\r\n                        R.map((value,idx_c)=>{\r\n                            return (\r\n                                <div key={idx_c} className='primeSquare' id={'node-row'+idx_r+'-col'+idx_c}>\r\n                                    <div></div>\r\n                                    <div className='rectangle'></div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n    const isPrime = (n) =>{\r\n        if(n < 2) return false;\r\n        for(let i=2; i*i<=n; i++){\r\n            if(n%i===0) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    const startPrimeSpiral = async () =>{\r\n        var arr = prime_Spiral_Generate(N);\r\n        var c = 0;\r\n        for(let i=0; i<arr.length; i++){\r\n\r\n            var node = document.getElementById('node-row'+arr[i].r+'-col'+arr[i].c);\r\n            if(isPrime(arr[i].num)){\r\n                node.children[0].className = 'circle';\r\n                setCntPrime(++c);\r\n            }\r\n            node.children[1].className = 'rectangle-'+arr[i].direction;\r\n            await waitForAnimatoin(60);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Navbar msg='Spiral Primes'></Navbar>\r\n            <div className='spiral-continer'>\r\n                <button className='button-4 start-btn' onClick={startPrimeSpiral}>Show Prime spiral</button>\r\n                <button className='button-4'>{cntPrime} prime numbers found out of {N*N}</button>\r\n\r\n                <div className='primeGridContainer'>\r\n                    <div>\r\n                    {gridOfNode}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nasync function waitForAnimatoin(animation_time){\r\n    return new Promise((resolve)=>{\r\n        setTimeout(()=>{\r\n            resolve('');\r\n        },animation_time)\r\n    })\r\n}\r\nexport default PrimeApp;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route\n} from \"react-router-dom\";\n\nimport './App.css'\nimport PathfindingVS from './Pages/PathfindingVS'\nimport Home from './Pages/Home';\nimport SortingApp from './Pages/BubbleSort';\nimport PrimeApp from './Pages/PrimeSpiral';\n\nfunction App() {\n\n  return (\n      <div className=\"App\">\n        <Router>\n          <Routes>\n            <Route path=\"/\" element={<Home/>} />\n            <Route path=\"/path-finding\" element={<PathfindingVS/>} />\n            <Route path=\"/sorting\" element={<SortingApp/>} />\n            <Route path=\"/spiral-prime\" element={<PrimeApp/>} />\n          </Routes>\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}